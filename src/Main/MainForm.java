
package Main;

import Modules.BillContent;
import Modules.BillTable;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import Modules.ConnectDatabase;
import Modules.Product;
import Modules.UserAccount;
import diu.swe.habib.JPanelSlider.JPanelSlider;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.NumberFormatter;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;


/**
 *
 * @author JhunR
 */
public class MainForm extends javax.swing.JFrame {

   
    public MainForm() {
        initComponents();
        this.setLocationRelativeTo(null);
        setSystemIcon();
        displayTime();
        initConnection();
        initTables();
        newBillId();
        newFoodId();
        newCoffeeId();
        newPastryId();
        showBillContent();
        getTotalAmountDue();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu2 = new javax.swing.JPopupMenu();
        jDeleteItem = new javax.swing.JMenuItem();
        panelMenu = new javax.swing.JPanel();
        btnHome = new javax.swing.JButton();
        btnOrder = new javax.swing.JButton();
        btnFoods = new javax.swing.JButton();
        btnPastry = new javax.swing.JButton();
        btnBills = new javax.swing.JButton();
        btnUser = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        btnCofee = new javax.swing.JButton();
        headerPanel = new javax.swing.JPanel();
        jClose = new javax.swing.JLabel();
        jMinimize = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jTime = new javax.swing.JLabel();
        jDate = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jMainPanelSlider = new diu.swe.habib.JPanelSlider.JPanelSlider();
        panelHome = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jUserPicture = new javax.swing.JLabel();
        tUserFullName = new javax.swing.JLabel();
        tUserFullName1 = new javax.swing.JLabel();
        setUsername = new javax.swing.JLabel();
        panelOrder = new javax.swing.JPanel();
        panel11 = new usu.widget.Panel();
        txtSearch = new usu.widget.glass.TextBoxGlass();
        lblPriceTotal = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblProdName = new javax.swing.JLabel();
        lblProdPrice = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox<>();
        lblProdId = new javax.swing.JLabel();
        jQuantity = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        jProductTable = new javax.swing.JTable();
        btnAddOrder = new usu.widget.Button();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jOrderTable = new javax.swing.JTable();
        tTotalAmount = new javax.swing.JLabel();
        receiptNo = new javax.swing.JLabel();
        btnSavePrint = new usu.widget.Button();
        jLabel27 = new javax.swing.JLabel();
        jTableNo = new javax.swing.JSpinner();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        panelFoods = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jMealTable = new javax.swing.JTable();
        txtMealSearch = new usu.widget.glass.TextBoxGlass();
        jIcon = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        tFoodId = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tMealName = new usu.widget.TextBox();
        jLabel4 = new javax.swing.JLabel();
        tMealPrice = new usu.widget.TextBox();
        jLabel7 = new javax.swing.JLabel();
        btnMealSave = new usu.widget.ButtonGlass();
        btnMealClear = new usu.widget.ButtonGlass();
        btnMealDelete = new usu.widget.ButtonGlass();
        jLabel17 = new javax.swing.JLabel();
        panel1 = new usu.widget.Panel();
        panel2 = new usu.widget.Panel();
        jLabel2 = new javax.swing.JLabel();
        button1 = new java.awt.Button();
        jLabel38 = new javax.swing.JLabel();
        panelCoffee = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        tCoffeeId = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tDrinkName = new usu.widget.TextBox();
        jLabel10 = new javax.swing.JLabel();
        tDrinkPrice = new usu.widget.TextBox();
        jLabel11 = new javax.swing.JLabel();
        btnDrinkSave = new usu.widget.ButtonGlass();
        btnDrinkDelete = new usu.widget.ButtonGlass();
        btnDrinkClear = new usu.widget.ButtonGlass();
        txtDrinkSearch = new usu.widget.glass.TextBoxGlass();
        jIcon1 = new javax.swing.JLabel();
        panel3 = new usu.widget.Panel();
        jLabel3 = new javax.swing.JLabel();
        panel4 = new usu.widget.Panel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jDrinkTable = new javax.swing.JTable();
        button3 = new java.awt.Button();
        jLabel37 = new javax.swing.JLabel();
        panelPastry = new javax.swing.JPanel();
        txtDessertSearch = new usu.widget.glass.TextBoxGlass();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        tDessertName = new usu.widget.TextBox();
        jLabel14 = new javax.swing.JLabel();
        tDessertPrice = new usu.widget.TextBox();
        jLabel15 = new javax.swing.JLabel();
        btnDessertSave = new usu.widget.ButtonGlass();
        btnDessertDelete = new usu.widget.ButtonGlass();
        btnDessertClear = new usu.widget.ButtonGlass();
        tPastryId = new javax.swing.JLabel();
        jIcon2 = new javax.swing.JLabel();
        panel5 = new usu.widget.Panel();
        jLabel16 = new javax.swing.JLabel();
        panel6 = new usu.widget.Panel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jDessertTable = new javax.swing.JTable();
        button5 = new java.awt.Button();
        jLabel36 = new javax.swing.JLabel();
        panelUser = new javax.swing.JPanel();
        panel7 = new usu.widget.Panel();
        jLabel18 = new javax.swing.JLabel();
        panel8 = new usu.widget.Panel();
        jPanel7 = new javax.swing.JPanel();
        jPicture = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        tFullName = new usu.widget.TextBox();
        jLabel31 = new javax.swing.JLabel();
        tUserId = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        tUsername = new usu.widget.TextBox();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        tEmpId = new usu.widget.TextBox();
        btnClearUser = new usu.widget.ButtonGlass();
        btnSaveUser = new usu.widget.ButtonGlass();
        btnDeleteUser = new usu.widget.ButtonGlass();
        tUserPass = new javax.swing.JPasswordField();
        jCheckShowPass = new javax.swing.JCheckBox();
        txtUserSearch = new usu.widget.glass.TextBoxGlass();
        jIcon3 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jUserTable = new javax.swing.JTable();
        btnSearchUser = new java.awt.Button();
        panelBills = new javax.swing.JPanel();
        panel9 = new usu.widget.Panel();
        jLabel35 = new javax.swing.JLabel();
        panel10 = new usu.widget.Panel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jBillTable = new javax.swing.JTable();
        txtSearchBill = new usu.widget.glass.TextBoxGlass();
        jIcon4 = new javax.swing.JLabel();
        btnPrintBill = new java.awt.Button();
        btnDeleteBill = new java.awt.Button();
        jBottomPanel = new javax.swing.JPanel();

        jPopupMenu2.setInvoker(jOrderTable);

        jDeleteItem.setText("Remove");
        jDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteItemActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jDeleteItem);

        jPopupMenu2.getAccessibleContext().setAccessibleParent(jOrderTable);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);
        setUndecorated(true);

        panelMenu.setBackground(new java.awt.Color(255, 255, 255));
        panelMenu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnHome.setBackground(new java.awt.Color(255, 255, 255));
        btnHome.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnHome.setText("HOME");
        btnHome.setActionCommand("   HOME");
        btnHome.setBorder(null);
        btnHome.setBorderPainted(false);
        btnHome.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHome.setPreferredSize(new java.awt.Dimension(0, 50));
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });
        panelMenu.add(btnHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 110, -1));

        btnOrder.setBackground(new java.awt.Color(255, 255, 255));
        btnOrder.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnOrder.setText("ORDERS");
        btnOrder.setBorder(null);
        btnOrder.setBorderPainted(false);
        btnOrder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnOrder.setPreferredSize(new java.awt.Dimension(73, 50));
        btnOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderActionPerformed(evt);
            }
        });
        panelMenu.add(btnOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 0, 110, -1));

        btnFoods.setBackground(new java.awt.Color(255, 255, 255));
        btnFoods.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnFoods.setText("COFFEE");
        btnFoods.setBorder(null);
        btnFoods.setBorderPainted(false);
        btnFoods.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFoods.setPreferredSize(new java.awt.Dimension(0, 50));
        btnFoods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFoodsActionPerformed(evt);
            }
        });
        panelMenu.add(btnFoods, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, 110, 50));

        btnPastry.setBackground(new java.awt.Color(255, 255, 255));
        btnPastry.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnPastry.setText("BREAD&PASTRY");
        btnPastry.setBorder(null);
        btnPastry.setBorderPainted(false);
        btnPastry.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPastry.setPreferredSize(new java.awt.Dimension(0, 50));
        btnPastry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPastryActionPerformed(evt);
            }
        });
        panelMenu.add(btnPastry, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 0, 160, 50));

        btnBills.setBackground(new java.awt.Color(255, 255, 255));
        btnBills.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnBills.setText("MANAGE BILLS");
        btnBills.setBorder(null);
        btnBills.setBorderPainted(false);
        btnBills.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBills.setPreferredSize(new java.awt.Dimension(0, 50));
        btnBills.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBillsActionPerformed(evt);
            }
        });
        panelMenu.add(btnBills, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, 160, 50));

        btnUser.setBackground(new java.awt.Color(255, 255, 255));
        btnUser.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnUser.setText("MANAGE USER");
        btnUser.setBorder(null);
        btnUser.setBorderPainted(false);
        btnUser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUser.setPreferredSize(new java.awt.Dimension(0, 50));
        btnUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserActionPerformed(evt);
            }
        });
        panelMenu.add(btnUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 0, 150, 50));

        btnLogout.setBackground(new java.awt.Color(255, 255, 255));
        btnLogout.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnLogout.setText("LOGOUT");
        btnLogout.setActionCommand("   HOME");
        btnLogout.setBorder(null);
        btnLogout.setBorderPainted(false);
        btnLogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogout.setPreferredSize(new java.awt.Dimension(0, 50));
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        panelMenu.add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(911, 0, 110, 50));

        btnCofee.setBackground(new java.awt.Color(255, 255, 255));
        btnCofee.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnCofee.setText("FOODS");
        btnCofee.setBorder(null);
        btnCofee.setBorderPainted(false);
        btnCofee.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCofee.setPreferredSize(new java.awt.Dimension(0, 50));
        btnCofee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCofeeActionPerformed(evt);
            }
        });
        panelMenu.add(btnCofee, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 110, 50));

        headerPanel.setBackground(new java.awt.Color(221, 56, 17));
        headerPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                headerPanelMouseDragged(evt);
            }
        });
        headerPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                headerPanelMousePressed(evt);
            }
        });
        headerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jClose.setBackground(new java.awt.Color(221, 56, 17));
        jClose.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_delete_30px.png"))); // NOI18N
        jClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jClose.setOpaque(true);
        jClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCloseMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jCloseMouseExited(evt);
            }
        });
        headerPanel.add(jClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(986, 0, 34, 38));

        jMinimize.setBackground(new java.awt.Color(221, 56, 17));
        jMinimize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jMinimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_minimize_window_30px.png"))); // NOI18N
        jMinimize.setOpaque(true);
        jMinimize.setPreferredSize(new java.awt.Dimension(34, 38));
        jMinimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMinimizeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMinimizeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jMinimizeMouseExited(evt);
            }
        });
        headerPanel.add(jMinimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 0, 34, 38));

        jLabel19.setFont(new java.awt.Font("Century Gothic", 1, 26)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("COFEESHOP BILLING SYSTEM");
        headerPanel.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 0, -1, 60));

        jTime.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jTime.setForeground(new java.awt.Color(255, 255, 255));
        jTime.setText("12:00 PM");
        headerPanel.add(jTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 160, 30));

        jDate.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jDate.setForeground(new java.awt.Color(255, 255, 255));
        jDate.setText("FEBRUARY 01,2021");
        headerPanel.add(jDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 6, -1, 30));

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_cafe_55px.png"))); // NOI18N
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        headerPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, 60, 60));

        jMainPanelSlider.setBackground(new java.awt.Color(255, 255, 255));
        jMainPanelSlider.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jMainPanelSlider.setPreferredSize(new java.awt.Dimension(1002, 572));

        panelHome.setBackground(new java.awt.Color(255, 255, 255));
        panelHome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_cafe_240px.png"))); // NOI18N
        panelHome.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 130, 240, 240));

        jLabel26.setFont(new java.awt.Font("Century Gothic", 1, 33)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("TO");
        panelHome.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 90, 680, 30));

        jLabel39.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel39.setText("All Rights Reserved 2021");
        panelHome.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 470, 680, 40));

        jLabel40.setFont(new java.awt.Font("Century Gothic", 1, 33)); // NOI18N
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("JR. COFFEESHOP SYSTEM V3.0");
        panelHome.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 360, 680, 60));

        jLabel41.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel41.setText("JR.E SYSTEM INC.");
        panelHome.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 440, 680, 40));

        jLabel42.setFont(new java.awt.Font("Century Gothic", 1, 33)); // NOI18N
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel42.setText("WELCOME");
        panelHome.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, 680, 70));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ADMIN ACCOUNT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 24))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(199, 160));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jUserPicture.setBackground(new java.awt.Color(204, 204, 204));
        jUserPicture.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jUserPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_male_user_100px.png"))); // NOI18N
        jUserPicture.setOpaque(true);
        jUserPicture.setPreferredSize(new java.awt.Dimension(30, 100));
        jPanel1.add(jUserPicture, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 240, 240));

        tUserFullName.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        tUserFullName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tUserFullName.setText("ROLANDO EDOLIANTES");
        jPanel1.add(tUserFullName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 280, 30));

        tUserFullName1.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        tUserFullName1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tUserFullName1.setText("ACCOUNT TYPE : ADMIN");
        jPanel1.add(tUserFullName1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 280, 30));

        setUsername.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        setUsername.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        setUsername.setText("JR. EDOLIANTES");
        jPanel1.add(setUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 280, 30));

        panelHome.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 300, 520));

        jMainPanelSlider.add(panelHome, "card8");

        panelOrder.setBackground(new java.awt.Color(255, 255, 255));
        panelOrder.setPreferredSize(new java.awt.Dimension(1002, 560));
        panelOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                panelOrderKeyPressed(evt);
            }
        });
        panelOrder.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel11.setBackground(new java.awt.Color(255, 255, 255));
        panel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "SELECT ORDER", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 18))); // NOI18N
        panel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtSearch.setText("Search Meal /Drinks /Dessert..");
        txtSearch.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        txtSearch.setPreferredSize(new java.awt.Dimension(89, 27));
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });
        panel11.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 290, 35));

        lblPriceTotal.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        lblPriceTotal.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPriceTotal.setText("0.00");
        panel11.add(lblPriceTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 500, 130, -1));

        jLabel12.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("Category :");
        panel11.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, 80, 20));

        lblProdName.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        lblProdName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblProdName.setText("None");
        panel11.add(lblProdName, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 400, 210, -1));

        lblProdPrice.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        lblProdPrice.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblProdPrice.setText("0.00");
        panel11.add(lblProdPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 430, 70, -1));
        panel11.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 490, 170, 10));

        jLabel21.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("TOTAL :");
        panel11.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, 70, 20));

        jLabel22.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("Name :");
        panel11.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, 70, -1));

        jLabel23.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("Amount :");
        panel11.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, 70, -1));

        jLabel24.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel24.setText("Quantity :");
        panel11.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, 70, -1));

        jLabel20.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("ID :");
        panel11.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 380, -1, -1));

        cmbType.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        cmbType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "FOODS", "COFFEE", "PASTRY" }));
        cmbType.setSelectedItem("CATEGORY");
        cmbType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTypeItemStateChanged(evt);
            }
        });
        panel11.add(cmbType, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, 140, 35));

        lblProdId.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        lblProdId.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblProdId.setText("#");
        panel11.add(lblProdId, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 380, 160, -1));

        jQuantity.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jQuantity.setAutoscrolls(true);
        jQuantity.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 102, 255), 1, true));
        jQuantity.setPreferredSize(new java.awt.Dimension(29, 25));
        jQuantity.setValue(1);
        jQuantity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jQuantityStateChanged(evt);
            }
        });
        jQuantity.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jQuantityMouseMoved(evt);
            }
        });
        jQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jQuantityFocusLost(evt);
            }
        });
        jQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jQuantityKeyPressed(evt);
            }
        });
        panel11.add(jQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 460, 70, -1));

        jProductTable.setAutoCreateRowSorter(true);
        jProductTable.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jProductTable.setForeground(new java.awt.Color(51, 51, 51));
        jProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "PRODUCT ID", "PRODUCT NAME", "PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jProductTable.setToolTipText("");
        jProductTable.setGridColor(new java.awt.Color(204, 204, 204));
        jProductTable.setRowHeight(22);
        jProductTable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jProductTable.setShowVerticalLines(false);
        jProductTable.setVerifyInputWhenFocusTarget(false);
        jProductTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jProductTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jProductTable);
        if (jProductTable.getColumnModel().getColumnCount() > 0) {
            jProductTable.getColumnModel().getColumn(0).setMinWidth(0);
            jProductTable.getColumnModel().getColumn(0).setMaxWidth(0);
            jProductTable.getColumnModel().getColumn(3).setMinWidth(100);
            jProductTable.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        panel11.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 440, 250));

        btnAddOrder.setText("Add To The Order");
        btnAddOrder.setEnabled(false);
        btnAddOrder.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        btnAddOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOrderActionPerformed(evt);
            }
        });
        panel11.add(btnAddOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 500, 190, 50));

        jPanel5.setBackground(new java.awt.Color(170, 4, 4));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panel11.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 10, 30));

        jPanel6.setBackground(new java.awt.Color(202, 8, 8));

        jLabel5.setFont(new java.awt.Font("Bahnschrift", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Search Coffee/ Food/ Pastry");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panel11.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 270, 30));

        panelOrder.add(panel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 490, 560));

        jOrderTable.setAutoCreateRowSorter(true);
        jOrderTable.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jOrderTable.setForeground(new java.awt.Color(51, 51, 51));
        jOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id2", "QTY.", "PRODUCT NAME", "CATEGORY", "PRICE", "Prod_id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jOrderTable.setToolTipText("");
        jOrderTable.setComponentPopupMenu(jPopupMenu2);
        jOrderTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jOrderTable.setGridColor(new java.awt.Color(204, 204, 204));
        jOrderTable.setRowHeight(22);
        jOrderTable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jOrderTable.setShowVerticalLines(false);
        jOrderTable.setVerifyInputWhenFocusTarget(false);
        jOrderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jOrderTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jOrderTable);
        if (jOrderTable.getColumnModel().getColumnCount() > 0) {
            jOrderTable.getColumnModel().getColumn(0).setMinWidth(0);
            jOrderTable.getColumnModel().getColumn(0).setMaxWidth(0);
            jOrderTable.getColumnModel().getColumn(1).setMaxWidth(50);
            jOrderTable.getColumnModel().getColumn(2).setMinWidth(180);
            jOrderTable.getColumnModel().getColumn(2).setMaxWidth(180);
            jOrderTable.getColumnModel().getColumn(5).setMinWidth(0);
            jOrderTable.getColumnModel().getColumn(5).setPreferredWidth(0);
            jOrderTable.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        panelOrder.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 60, 460, 390));

        tTotalAmount.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        tTotalAmount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tTotalAmount.setText("0.00");
        panelOrder.add(tTotalAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 460, 140, -1));

        receiptNo.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        receiptNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        receiptNo.setText("BILL2021-0000");
        panelOrder.add(receiptNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 20, 130, -1));

        btnSavePrint.setBackground(new java.awt.Color(28, 143, 236));
        btnSavePrint.setForeground(new java.awt.Color(255, 255, 255));
        btnSavePrint.setText("Save & Print Bill");
        btnSavePrint.setContentAreaFilled(false);
        btnSavePrint.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnSavePrint.setOpaque(true);
        btnSavePrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePrintActionPerformed(evt);
            }
        });
        panelOrder.add(btnSavePrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 510, 240, 50));

        jLabel27.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel27.setText("Table No. :");
        panelOrder.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 480, 80, -1));

        jTableNo.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        jTableNo.setAlignmentX(10.0F);
        jTableNo.setAlignmentY(10.0F);
        jTableNo.setAutoscrolls(true);
        jTableNo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 1, true));
        jTableNo.setPreferredSize(new java.awt.Dimension(29, 25));
        jTableNo.setVerifyInputWhenFocusTarget(false);
        jTableNo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTableNoStateChanged(evt);
            }
        });
        jTableNo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTableNoMouseMoved(evt);
            }
        });
        panelOrder.add(jTableNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 520, 100, 50));

        jLabel29.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel29.setText("TOTAL AMOUNT DUE :");
        panelOrder.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 460, 160, -1));

        jLabel30.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel30.setText("BILL NO :");
        panelOrder.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 20, 90, -1));

        jMainPanelSlider.add(panelOrder, "card2");

        panelFoods.setBackground(new java.awt.Color(255, 255, 255));
        panelFoods.setPreferredSize(new java.awt.Dimension(870, 570));
        panelFoods.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jMealTable.setAutoCreateRowSorter(true);
        jMealTable.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jMealTable.setForeground(new java.awt.Color(51, 51, 51));
        jMealTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "FOOD ID", "FOOD NAME", "PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jMealTable.setToolTipText("edit\ndelete");
        jMealTable.setGridColor(new java.awt.Color(204, 204, 204));
        jMealTable.setRowHeight(20);
        jMealTable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jMealTable.setShowVerticalLines(false);
        jMealTable.setVerifyInputWhenFocusTarget(false);
        jMealTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMealTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jMealTable);
        if (jMealTable.getColumnModel().getColumnCount() > 0) {
            jMealTable.getColumnModel().getColumn(0).setMinWidth(0);
            jMealTable.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        panelFoods.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 150, 450, 360));

        txtMealSearch.setCaretColor(new java.awt.Color(0, 0, 255));
        txtMealSearch.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        txtMealSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMealSearchKeyTyped(evt);
            }
        });
        panelFoods.add(txtMealSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 100, 370, 40));

        jIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_search_35px.png"))); // NOI18N
        panelFoods.add(jIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 100, 40, 40));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "MEAL INFORMATION", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 18))); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tFoodId.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        tFoodId.setText("FOOD ID:");
        jPanel2.add(tFoodId, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 60, -1, 30));

        jLabel6.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Food Name :");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 140, -1, -1));

        tMealName.setToolTipText("");
        tMealName.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        tMealName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tMealNameFocusLost(evt);
            }
        });
        jPanel2.add(tMealName, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, 310, 35));

        jLabel4.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Food Price :");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, 100, -1));

        tMealPrice.setToolTipText("");
        tMealPrice.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        tMealPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tMealPriceKeyTyped(evt);
            }
        });
        jPanel2.add(tMealPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 230, 310, 35));

        jLabel7.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel7.setText("FOOD ID :");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, 70, 30));

        btnMealSave.setBackground(new java.awt.Color(0, 0, 0));
        btnMealSave.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnMealSave.setActionCommand("save");
        btnMealSave.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        btnMealSave.setGlassColor(java.awt.SystemColor.textHighlight);
        btnMealSave.setLabel("SAVE");
        btnMealSave.setRoundRect(true);
        btnMealSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMealSaveActionPerformed(evt);
            }
        });
        jPanel2.add(btnMealSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 150, 80));

        btnMealClear.setBackground(new java.awt.Color(0, 0, 0));
        btnMealClear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnMealClear.setText("CLEAR");
        btnMealClear.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        btnMealClear.setGlassColor(new java.awt.Color(0, 0, 0));
        btnMealClear.setRoundRect(true);
        btnMealClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMealClearActionPerformed(evt);
            }
        });
        jPanel2.add(btnMealClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 330, 150, 80));

        btnMealDelete.setBackground(new java.awt.Color(0, 0, 0));
        btnMealDelete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnMealDelete.setText("DELETE");
        btnMealDelete.setEnabled(false);
        btnMealDelete.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        btnMealDelete.setGlassColor(new java.awt.Color(255, 0, 0));
        btnMealDelete.setRoundRect(true);
        btnMealDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMealDeleteActionPerformed(evt);
            }
        });
        jPanel2.add(btnMealDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, 150, 80));

        jLabel17.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel17.setText("FOOD ID :");
        jPanel2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, -1, 30));

        panelFoods.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 520, 470));

        panel1.setBackground(new java.awt.Color(65, 128, 148));

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelFoods.add(panel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 10, 70));

        panel2.setBackground(new java.awt.Color(8, 150, 202));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ADD / EDIT / MANAGE FOODS");

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelFoods.add(panel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 370, 70));

        button1.setActionCommand("PRINT FOOD LIST");
        button1.setBackground(new java.awt.Color(28, 143, 236));
        button1.setFont(new java.awt.Font("Arial Narrow", 1, 20)); // NOI18N
        button1.setForeground(new java.awt.Color(255, 255, 255));
        button1.setLabel("PRINT FOOD LIST");
        button1.setName(""); // NOI18N
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        panelFoods.add(button1, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 520, 200, 50));

        jLabel38.setFont(new java.awt.Font("Nirmala UI", 0, 22)); // NOI18N
        jLabel38.setText("Search For FOODS");
        panelFoods.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 60, 230, 30));

        jMainPanelSlider.add(panelFoods, "card3");

        panelCoffee.setBackground(new java.awt.Color(255, 255, 255));
        panelCoffee.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "DRINKS INFORMATION", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 18))); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tCoffeeId.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        tCoffeeId.setText("ID#");
        jPanel3.add(tCoffeeId, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 60, 150, 30));

        jLabel9.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("COFFEE Name :");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 140, -1, -1));

        tDrinkName.setToolTipText("");
        tDrinkName.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        tDrinkName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tDrinkNameFocusLost(evt);
            }
        });
        jPanel3.add(tDrinkName, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, 310, 35));

        jLabel10.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText("COFFEE Price :");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, 120, -1));

        tDrinkPrice.setToolTipText("");
        tDrinkPrice.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        tDrinkPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tDrinkPriceKeyTyped(evt);
            }
        });
        jPanel3.add(tDrinkPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 230, 310, 35));

        jLabel11.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel11.setText("COFFEE ID:");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 60, -1, 30));

        btnDrinkSave.setBackground(new java.awt.Color(0, 0, 0));
        btnDrinkSave.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnDrinkSave.setActionCommand("save");
        btnDrinkSave.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        btnDrinkSave.setGlassColor(java.awt.SystemColor.textHighlight);
        btnDrinkSave.setLabel("SAVE");
        btnDrinkSave.setRoundRect(true);
        btnDrinkSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrinkSaveActionPerformed(evt);
            }
        });
        jPanel3.add(btnDrinkSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 150, 80));

        btnDrinkDelete.setBackground(new java.awt.Color(0, 0, 0));
        btnDrinkDelete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnDrinkDelete.setText("DELETE");
        btnDrinkDelete.setEnabled(false);
        btnDrinkDelete.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        btnDrinkDelete.setGlassColor(new java.awt.Color(255, 0, 0));
        btnDrinkDelete.setRoundRect(true);
        btnDrinkDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrinkDeleteActionPerformed(evt);
            }
        });
        jPanel3.add(btnDrinkDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, 150, 80));

        btnDrinkClear.setBackground(new java.awt.Color(0, 0, 0));
        btnDrinkClear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnDrinkClear.setText("CLEAR");
        btnDrinkClear.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        btnDrinkClear.setGlassColor(new java.awt.Color(0, 0, 0));
        btnDrinkClear.setRoundRect(true);
        btnDrinkClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrinkClearActionPerformed(evt);
            }
        });
        jPanel3.add(btnDrinkClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 330, 150, 80));

        panelCoffee.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 520, 470));

        txtDrinkSearch.setCaretColor(new java.awt.Color(0, 0, 255));
        txtDrinkSearch.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        txtDrinkSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDrinkSearchKeyTyped(evt);
            }
        });
        panelCoffee.add(txtDrinkSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 110, 370, 40));

        jIcon1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_search_35px.png"))); // NOI18N
        panelCoffee.add(jIcon1, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 110, 40, 40));

        panel3.setBackground(new java.awt.Color(1, 212, 143));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ADD / EDIT / MANAGE COFFEES");

        javax.swing.GroupLayout panel3Layout = new javax.swing.GroupLayout(panel3);
        panel3.setLayout(panel3Layout);
        panel3Layout.setHorizontalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel3Layout.setVerticalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelCoffee.add(panel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 380, 70));

        panel4.setBackground(new java.awt.Color(16, 165, 115));

        javax.swing.GroupLayout panel4Layout = new javax.swing.GroupLayout(panel4);
        panel4.setLayout(panel4Layout);
        panel4Layout.setHorizontalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel4Layout.setVerticalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelCoffee.add(panel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 10, 70));

        jDrinkTable.setAutoCreateRowSorter(true);
        jDrinkTable.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jDrinkTable.setForeground(new java.awt.Color(51, 51, 51));
        jDrinkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "FOOD ID", "FOOD NAME", "PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jDrinkTable.setToolTipText("edit\ndelete");
        jDrinkTable.setGridColor(new java.awt.Color(204, 204, 204));
        jDrinkTable.setRowHeight(20);
        jDrinkTable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jDrinkTable.setShowVerticalLines(false);
        jDrinkTable.setVerifyInputWhenFocusTarget(false);
        jDrinkTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDrinkTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jDrinkTable);
        if (jDrinkTable.getColumnModel().getColumnCount() > 0) {
            jDrinkTable.getColumnModel().getColumn(0).setMinWidth(0);
            jDrinkTable.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        panelCoffee.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 160, 450, 350));

        button3.setBackground(new java.awt.Color(28, 143, 236));
        button3.setFont(new java.awt.Font("Arial Narrow", 1, 20)); // NOI18N
        button3.setForeground(new java.awt.Color(255, 255, 255));
        button3.setLabel("PRINT COFFEE LIST");
        button3.setName(""); // NOI18N
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });
        panelCoffee.add(button3, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 520, 200, 50));
        button3.getAccessibleContext().setAccessibleName("");

        jLabel37.setFont(new java.awt.Font("Nirmala UI", 0, 22)); // NOI18N
        jLabel37.setText("Search For COFFEE");
        panelCoffee.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, 230, 30));

        jMainPanelSlider.add(panelCoffee, "card4");

        panelPastry.setBackground(new java.awt.Color(255, 255, 255));
        panelPastry.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtDessertSearch.setCaretColor(new java.awt.Color(0, 0, 255));
        txtDessertSearch.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        txtDessertSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDessertSearchKeyTyped(evt);
            }
        });
        panelPastry.add(txtDessertSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 110, 370, 40));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "DESSERT INFORMATION", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 18))); // NOI18N
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel13.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Pastry Name :");
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 140, -1, -1));

        tDessertName.setToolTipText("");
        tDessertName.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        tDessertName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tDessertNameFocusLost(evt);
            }
        });
        jPanel4.add(tDessertName, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, 310, 35));

        jLabel14.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel14.setText("Pastry Price :");
        jPanel4.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, 120, -1));

        tDessertPrice.setToolTipText("");
        tDessertPrice.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        tDessertPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tDessertPriceKeyTyped(evt);
            }
        });
        jPanel4.add(tDessertPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 230, 310, 35));

        jLabel15.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel15.setText("PASTRY ID:");
        jPanel4.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, -1, 30));

        btnDessertSave.setBackground(new java.awt.Color(0, 0, 0));
        btnDessertSave.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnDessertSave.setActionCommand("save");
        btnDessertSave.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        btnDessertSave.setGlassColor(java.awt.SystemColor.textHighlight);
        btnDessertSave.setLabel("SAVE");
        btnDessertSave.setRoundRect(true);
        btnDessertSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDessertSaveActionPerformed(evt);
            }
        });
        jPanel4.add(btnDessertSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 150, 80));

        btnDessertDelete.setBackground(new java.awt.Color(0, 0, 0));
        btnDessertDelete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnDessertDelete.setText("DELETE");
        btnDessertDelete.setEnabled(false);
        btnDessertDelete.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        btnDessertDelete.setGlassColor(new java.awt.Color(255, 0, 0));
        btnDessertDelete.setRoundRect(true);
        btnDessertDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDessertDeleteActionPerformed(evt);
            }
        });
        jPanel4.add(btnDessertDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, 150, 80));

        btnDessertClear.setBackground(new java.awt.Color(0, 0, 0));
        btnDessertClear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnDessertClear.setText("CLEAR");
        btnDessertClear.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        btnDessertClear.setGlassColor(new java.awt.Color(0, 0, 0));
        btnDessertClear.setRoundRect(true);
        btnDessertClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDessertClearActionPerformed(evt);
            }
        });
        jPanel4.add(btnDessertClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 330, 150, 80));

        tPastryId.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        tPastryId.setText("ID#");
        jPanel4.add(tPastryId, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, 150, 30));

        panelPastry.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 520, 470));

        jIcon2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jIcon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_search_35px.png"))); // NOI18N
        panelPastry.add(jIcon2, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 110, 40, 40));

        panel5.setBackground(new java.awt.Color(231, 137, 0));

        jLabel16.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("ADD / EDIT / MANAGE PASTRIES");

        javax.swing.GroupLayout panel5Layout = new javax.swing.GroupLayout(panel5);
        panel5.setLayout(panel5Layout);
        panel5Layout.setHorizontalGroup(
            panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel5Layout.setVerticalGroup(
            panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel16)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelPastry.add(panel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, 70));

        panel6.setBackground(new java.awt.Color(165, 103, 16));

        javax.swing.GroupLayout panel6Layout = new javax.swing.GroupLayout(panel6);
        panel6.setLayout(panel6Layout);
        panel6Layout.setHorizontalGroup(
            panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel6Layout.setVerticalGroup(
            panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelPastry.add(panel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 10, 70));

        jDessertTable.setAutoCreateRowSorter(true);
        jDessertTable.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jDessertTable.setForeground(new java.awt.Color(51, 51, 51));
        jDessertTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "PASTRY ID", "PASTRY NAME", "PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jDessertTable.setToolTipText("edit\ndelete");
        jDessertTable.setGridColor(new java.awt.Color(204, 204, 204));
        jDessertTable.setRowHeight(20);
        jDessertTable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jDessertTable.setShowVerticalLines(false);
        jDessertTable.setVerifyInputWhenFocusTarget(false);
        jDessertTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDessertTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jDessertTable);
        if (jDessertTable.getColumnModel().getColumnCount() > 0) {
            jDessertTable.getColumnModel().getColumn(0).setMinWidth(0);
            jDessertTable.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        panelPastry.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 160, 450, 350));

        button5.setBackground(new java.awt.Color(28, 143, 236));
        button5.setFont(new java.awt.Font("Arial Narrow", 1, 19)); // NOI18N
        button5.setForeground(new java.awt.Color(255, 255, 255));
        button5.setLabel("PRINT PASTRY LIST");
        button5.setName(""); // NOI18N
        button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button5ActionPerformed(evt);
            }
        });
        panelPastry.add(button5, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 520, 220, 50));

        jLabel36.setFont(new java.awt.Font("Nirmala UI", 0, 22)); // NOI18N
        jLabel36.setText("Search For PASTRY");
        panelPastry.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, 230, 30));

        jMainPanelSlider.add(panelPastry, "card5");

        panelUser.setBackground(new java.awt.Color(255, 255, 255));
        panelUser.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel7.setBackground(new java.awt.Color(233, 115, 5));

        jLabel18.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("ADD / EDIT / MANAGE USER ACCOUNTS");

        javax.swing.GroupLayout panel7Layout = new javax.swing.GroupLayout(panel7);
        panel7.setLayout(panel7Layout);
        panel7Layout.setHorizontalGroup(
            panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel7Layout.setVerticalGroup(
            panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel7Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel18)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelUser.add(panel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 480, 70));

        panel8.setBackground(new java.awt.Color(165, 103, 16));

        javax.swing.GroupLayout panel8Layout = new javax.swing.GroupLayout(panel8);
        panel8.setLayout(panel8Layout);
        panel8Layout.setHorizontalGroup(
            panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel8Layout.setVerticalGroup(
            panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelUser.add(panel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 10, 70));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "USER ACCOUNT DETAILS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 24))); // NOI18N
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPicture.setOpaque(true);
        jPanel7.add(jPicture, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 180, 170));

        jButton1.setBackground(new java.awt.Color(2, 151, 209));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Choose Profile Photo");
        jButton1.setContentAreaFilled(false);
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 180, 30));

        jLabel28.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("Full Name :");
        jPanel7.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        tFullName.setToolTipText("");
        tFullName.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        tFullName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tFullNameFocusLost(evt);
            }
        });
        jPanel7.add(tFullName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 290, 35));

        jLabel31.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel31.setText("ID:");
        jPanel7.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 20, 30));

        tUserId.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        tUserId.setText("#");
        jPanel7.add(tUserId, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 80, 160, 30));

        jLabel32.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("Your Username :");
        jPanel7.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, -1, -1));

        tUsername.setToolTipText("");
        tUsername.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jPanel7.add(tUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 290, 35));

        jLabel33.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Your Password :");
        jPanel7.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, -1, -1));

        jLabel34.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Employee ID No. :");
        jPanel7.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, -1, -1));

        tEmpId.setToolTipText("");
        tEmpId.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        tEmpId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tEmpIdFocusLost(evt);
            }
        });
        jPanel7.add(tEmpId, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 195, 270, 35));

        btnClearUser.setBackground(new java.awt.Color(0, 0, 0));
        btnClearUser.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnClearUser.setText("CLEAR");
        btnClearUser.setActionCommand("save");
        btnClearUser.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        btnClearUser.setGlassColor(new java.awt.Color(102, 102, 102));
        btnClearUser.setRoundRect(true);
        btnClearUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearUserActionPerformed(evt);
            }
        });
        jPanel7.add(btnClearUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 390, 150, 50));

        btnSaveUser.setBackground(new java.awt.Color(0, 0, 0));
        btnSaveUser.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnSaveUser.setActionCommand("save");
        btnSaveUser.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        btnSaveUser.setGlassColor(java.awt.SystemColor.textHighlight);
        btnSaveUser.setLabel("SAVE");
        btnSaveUser.setRoundRect(true);
        btnSaveUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveUserActionPerformed(evt);
            }
        });
        jPanel7.add(btnSaveUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 270, 150, 50));

        btnDeleteUser.setBackground(new java.awt.Color(0, 0, 0));
        btnDeleteUser.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        btnDeleteUser.setText("DELETE");
        btnDeleteUser.setActionCommand("save");
        btnDeleteUser.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        btnDeleteUser.setGlassColor(new java.awt.Color(255, 0, 51));
        btnDeleteUser.setRoundRect(true);
        jPanel7.add(btnDeleteUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 330, 150, 50));

        tUserPass.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jPanel7.add(tUserPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 290, 35));

        jCheckShowPass.setBackground(new java.awt.Color(255, 255, 255));
        jCheckShowPass.setText("Show Password");
        jCheckShowPass.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckShowPassStateChanged(evt);
            }
        });
        jPanel7.add(jCheckShowPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 390, -1, 20));

        panelUser.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 490, 460));

        txtUserSearch.setCaretColor(new java.awt.Color(0, 0, 255));
        txtUserSearch.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        txtUserSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUserSearchKeyPressed(evt);
            }
        });
        panelUser.add(txtUserSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 110, 360, 40));

        jIcon3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jIcon3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_search_35px.png"))); // NOI18N
        panelUser.add(jIcon3, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 110, 40, 40));

        jUserTable.setAutoCreateRowSorter(true);
        jUserTable.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jUserTable.setForeground(new java.awt.Color(51, 51, 51));
        jUserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "USERNAME", "NAME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jUserTable.setToolTipText("edit\ndelete");
        jUserTable.setGridColor(new java.awt.Color(204, 204, 204));
        jUserTable.setRowHeight(20);
        jUserTable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jUserTable.setShowVerticalLines(false);
        jUserTable.setVerifyInputWhenFocusTarget(false);
        jUserTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jUserTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jUserTable);
        if (jUserTable.getColumnModel().getColumnCount() > 0) {
            jUserTable.getColumnModel().getColumn(0).setMinWidth(50);
            jUserTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            jUserTable.getColumnModel().getColumn(0).setMaxWidth(50);
            jUserTable.getColumnModel().getColumn(1).setMinWidth(150);
            jUserTable.getColumnModel().getColumn(1).setMaxWidth(150);
        }

        panelUser.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 160, 480, 400));

        btnSearchUser.setBackground(java.awt.SystemColor.textHighlight);
        btnSearchUser.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        btnSearchUser.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchUser.setLabel("SEARCH");
        btnSearchUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchUserActionPerformed(evt);
            }
        });
        panelUser.add(btnSearchUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 110, 110, 40));

        jMainPanelSlider.add(panelUser, "card7");

        panelBills.setBackground(new java.awt.Color(255, 255, 255));
        panelBills.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel9.setBackground(new java.awt.Color(233, 115, 5));

        jLabel35.setFont(new java.awt.Font("Century Gothic", 1, 28)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText("MANAGE BILL RECORDS");

        javax.swing.GroupLayout panel9Layout = new javax.swing.GroupLayout(panel9);
        panel9.setLayout(panel9Layout);
        panel9Layout.setHorizontalGroup(
            panel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel9Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel35)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel9Layout.setVerticalGroup(
            panel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel9Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelBills.add(panel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 390, 80));

        panel10.setBackground(new java.awt.Color(165, 103, 16));

        javax.swing.GroupLayout panel10Layout = new javax.swing.GroupLayout(panel10);
        panel10.setLayout(panel10Layout);
        panel10Layout.setHorizontalGroup(
            panel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel10Layout.setVerticalGroup(
            panel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelBills.add(panel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 10, 80));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "BILLS DATABASE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Narrow", 1, 24))); // NOI18N
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jBillTable.setFont(new java.awt.Font("Arial Narrow", 0, 17)); // NOI18N
        jBillTable.setForeground(new java.awt.Color(51, 51, 51));
        jBillTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BILL ID", "TRANSAC. DATE", "FOR TABLE NO.", "TOTAL AMOUNT DUE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jBillTable.setToolTipText("edit\ndelete");
        jBillTable.setGridColor(new java.awt.Color(204, 204, 204));
        jBillTable.setRowHeight(25);
        jBillTable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jBillTable.setShowVerticalLines(false);
        jBillTable.setVerifyInputWhenFocusTarget(false);
        jBillTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBillTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jBillTable);

        jPanel8.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 920, 320));

        txtSearchBill.setCaretColor(new java.awt.Color(0, 0, 255));
        txtSearchBill.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        txtSearchBill.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchBillKeyTyped(evt);
            }
        });
        jPanel8.add(txtSearchBill, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 380, 50));

        jIcon4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jIcon4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_search_35px.png"))); // NOI18N
        jPanel8.add(jIcon4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 380, 40, 50));

        btnPrintBill.setBackground(java.awt.SystemColor.textHighlight);
        btnPrintBill.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPrintBill.setEnabled(false);
        btnPrintBill.setFont(new java.awt.Font("Century Gothic", 1, 21)); // NOI18N
        btnPrintBill.setForeground(new java.awt.Color(255, 255, 255));
        btnPrintBill.setLabel("VIEW & PRINT");
        btnPrintBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintBillActionPerformed(evt);
            }
        });
        jPanel8.add(btnPrintBill, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 380, 200, 50));

        btnDeleteBill.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteBill.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeleteBill.setEnabled(false);
        btnDeleteBill.setFont(new java.awt.Font("Century Gothic", 1, 21)); // NOI18N
        btnDeleteBill.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteBill.setLabel("DELETE");
        btnDeleteBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBillActionPerformed(evt);
            }
        });
        jPanel8.add(btnDeleteBill, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 380, 210, 50));

        panelBills.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 980, 460));

        jMainPanelSlider.add(panelBills, "card6");

        jBottomPanel.setBackground(new java.awt.Color(185, 55, 25));
        jBottomPanel.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jMainPanelSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jBottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jMainPanelSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//Region for methods and variables
String sql;
PreparedStatement ps = null;
ResultSet rs = null;
Statement st = null;  
Boolean b;
int xx; int xy;
final String food="FOODS";
final String coffee="COFFEE";
final String pastry="PASTRY";
private String type;
private int id;
private int maxCount;
Connection con;
Date date=new Date();
Calendar cal;
String ImgPath;
String username;
//display Current Date and Time
public void displayTime(){
       new Timer(0,new ActionListener() {
           @Override
           public void actionPerformed(ActionEvent e) {
             Date d = new Date();
             SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
            jTime.setText(sdf.format(d));
            SimpleDateFormat sd = new SimpleDateFormat("MMMM dd,yyyy");
            jDate.setText(sd.format(d));
           }

           
       }).start();
            
   }
//init connection
final void initConnection(){
    try{con = ConnectDatabase.getConnection();
    }catch(Exception e){JOptionPane.showMessageDialog(null,e);}
}

//set System Icon
void setSystemIcon(){
    try{
    Image icon = ImageIO.read(getClass().getResource("/Resources/icons8_cafe_240px.png"));
    setIconImage(icon);
    }catch(Exception e){JOptionPane.showMessageDialog(null,e);};
}

//getUserName
public void getUsernamePicture(String username1){
    try{
    username=username1;
    st=con.createStatement();
    sql="Select * From user_table WHERE username='" + username + "'";
    rs=st.executeQuery(sql);
    if(rs.next()){
        tUserFullName.setText(rs.getString("fullname"));
        setUsername.setText(username);
        byte[] img = rs.getBytes("photo");
        ImageIcon image = new ImageIcon(img);
        Image im = image.getImage();
        Image myImg = im.getScaledInstance(jUserPicture.getWidth(), jUserPicture.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon newImage = new ImageIcon(myImg);
        jUserPicture.setIcon(newImage);
    }
    }catch(Exception e){JOptionPane.showMessageDialog(null,e);}
}
//init tables DESIGN
void initTables(){
  try{
  //design Table Header
  jMealTable.getTableHeader().setFont(new Font("Century Gothic",Font.BOLD,16));
  JTableHeader header=jMealTable.getTableHeader(); header.setBackground(new Color(0,191,231));
  header.setOpaque(false);header.setForeground(Color.white);
  jDrinkTable.getTableHeader().setFont(new Font("Century Gothic",Font.BOLD,16));
  header=jDrinkTable.getTableHeader(); header.setBackground(new Color(18,197,110));
  header.setOpaque(false);header.setForeground(Color.white);
  jDessertTable.getTableHeader().setFont(new Font("Century Gothic",Font.BOLD,16));
  header=jDessertTable.getTableHeader(); header.setBackground(new Color(197,123,18));
  header.setOpaque(false);header.setForeground(Color.white); 
  jProductTable.getTableHeader().setFont(new Font("Century Gothic",Font.BOLD,16));
  header=jProductTable.getTableHeader(); header.setBackground(new Color(0,214,165));
  header.setOpaque(false);header.setForeground(Color.white);
  jOrderTable.getTableHeader().setFont(new Font("Century Gothic",Font.BOLD,16));
  header=jOrderTable.getTableHeader(); header.setBackground(new Color(117,117,117));
  header.setOpaque(false);header.setForeground(Color.white);
  jUserTable.getTableHeader().setFont(new Font("Century Gothic",Font.BOLD,16));
  header=jUserTable.getTableHeader(); header.setBackground(new Color(211,67,0));
  header.setOpaque(false);header.setForeground(Color.white);
  jBillTable.getTableHeader().setFont(new Font("Century Gothic",Font.BOLD,17));
  header=jBillTable.getTableHeader(); header.setBackground(new Color(218,63,28));
  header.setOpaque(false);header.setForeground(Color.white);
  
  JComponent editor=jQuantity.getEditor();
  JSpinner.DefaultEditor pin=(JSpinner.DefaultEditor)editor;pin.getTextField().setHorizontalAlignment(JTextField.CENTER);
  editor=jTableNo.getEditor();pin=(JSpinner.DefaultEditor)editor;pin.getTextField().setHorizontalAlignment(JTextField.CENTER);
  
  //show meal table on startup
  sql = "select * from product where concat(id,prod_id,prod_name) Like '%" + "" + "%' and type='" + food + "'";
  showMealTable(sql);
  
  //show drink table on startup
  sql = "select * from product where concat(id,prod_id,prod_name) Like '%" + "" + "%' and type='" + coffee + "'";
  showDrinkTable(sql);
  
  //showDesert table on startup
  sql = "select * from product where concat(id,prod_id,prod_name) Like '%" + "" + "%' and type='" + pastry + "'";
  showDessertTable(sql);
  
  //show user table on startup
  sql="select * from user_table where concat(id,employee_id,fullname,username) Like '%" + "" + "%'";
  showUserTable(sql);      
  
  //show Bills Table on startup
  sql="Select * from bill_table WHERE concat(bill_id,table_no,totalPrice,dateCreated) Like '%" + "" + "%' ORDER BY bill_id DESC";
  showBillTable(sql);
    }catch(Exception e){JOptionPane.showMessageDialog(null,e);}
  
  //Show product table order on startup
  try{sql = "select * from product where concat(id,prod_id,prod_name)Like '%" + "" + "%' ";
  showProductTable(sql);}catch(Exception e){e.printStackTrace();}
}

//get Bill_table and forward value to arraylist
public ArrayList<BillTable>getBillTable(String query){
        ArrayList<BillTable>sublist = new ArrayList<>();
       sql = query;
     
        try{
            st = con.createStatement();
            rs=st.executeQuery(sql);
           BillTable billTable;
            while(rs.next()){
                billTable = new BillTable(rs.getString("bill_id"),
                rs.getInt("table_no"),rs.getDouble("totalPrice"),rs.getDate("dateCreated"));
                sublist.add(billTable);
            }
        }
        catch(SQLException e){JOptionPane.showMessageDialog(null,e);}
        return sublist;
}

//show Bill table
void showBillTable(String query){
        ArrayList<BillTable>list = getBillTable(query);
        DefaultTableModel model = (DefaultTableModel) jBillTable.getModel();
        DefaultTableCellRenderer centerRender = new DefaultTableCellRenderer();
        centerRender.setHorizontalAlignment( SwingConstants.LEFT );
        jBillTable.getColumnModel().getColumn(3).setCellRenderer( centerRender );       
//set table contents
        model.setRowCount(0);
        Object[] row = new Object [4];
        for(int i = 0;i<list.size();i++){
        row[0] = list.get(i).getBillId();
        row[1] = list.get(i).getDateCreated();
        row[2] = list.get(i).getTableNo();
        row[3] = list.get(i).getTotalAmountDue();
        model.addRow(row);
        }   
}

//getBill Info
String getBillID;
void getBill(int index){
try{
    if (index >= 0){
    DefaultTableModel dtm = (DefaultTableModel) jBillTable.getModel();
    getBillID= dtm.getValueAt(index,0).toString();
    }
    btnPrintBill.setEnabled(true);
    btnDeleteBill.setEnabled(true);
        }
        catch(Exception e){JOptionPane.showMessageDialog(null,e);}
    }

//stretch Image
public ImageIcon resizeImage(String imagePath, byte [] pic){
    ImageIcon myImage = null;
        if (imagePath != null){
            myImage = new ImageIcon(imagePath);
        }
        else{
            myImage = new ImageIcon(pic);
        }
    Image img = myImage.getImage();
    Image img2 = img.getScaledInstance(jPicture.getWidth(), jPicture.getHeight(),Image.SCALE_SMOOTH);
    ImageIcon image = new ImageIcon(img2);
    return image;
}
    
//choose profile picture
void choosePicture(){
    JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images","jpg","png");
        file.addChoosableFileFilter(filter);
        
        int result = file.showSaveDialog(null);
        
        if(result == JFileChooser.APPROVE_OPTION){
            File selectedFile = file.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            jPicture.setIcon(resizeImage(path,null));
            ImgPath=path;
        }
        else{
            JOptionPane.showMessageDialog(null,"No File Selected!");
        }
}

//check user details
boolean checkUser(){
 if(tEmpId.getText().equals("")){
    JOptionPane.showMessageDialog(null,"Employee ID is Empty!"); tEmpId.requestFocus(); b=false;   
}else if(tFullName.getText().equals("")){
    JOptionPane.showMessageDialog(null,"Employee ID is Empty!"); tFullName.requestFocus(); b=false;  
}else if(tUsername.getText().equals("")){
    JOptionPane.showMessageDialog(null,"Employee ID is Empty!"); tUsername.requestFocus(); b=false;  
}else if(String.valueOf(tUserPass.getPassword()).equals("")){
    JOptionPane.showMessageDialog(null,"Employee ID is Empty!"); tUserPass.requestFocus(); b=false;  
}else if(jPicture.getIcon()==null){
    JOptionPane.showMessageDialog(null,"No Profile Picture Selected!");b=false;  
}else{
    b=true;
}
 return b;
}

//clear user input
void clearUser(){
    tEmpId.setText("");
    tFullName.setText("");
    tUsername.setText("");
    tUserPass.setText("");
    tUserId.setText("#");
    btnSaveUser.setText("SAVE");
    btnDeleteUser.setEnabled(false);
    jPicture.setIcon(null);
}

//saveUser
private void saveUser(){
    try{
    sql = "insert into user_table(employee_id,fullname,username,password,photo)values(?,?,?,?,?)";
    ps = con.prepareStatement(sql);  
    ps.setString(1, tEmpId.getText());
    ps.setString(2, tFullName.getText());
    ps.setString(3, tUsername.getText());
    ps.setString(4, String.valueOf(tUserPass.getPassword()));
    InputStream img = new FileInputStream(new File(ImgPath));
    ps.setBlob(5, img);
    ps.execute();
    JOptionPane.showMessageDialog(null,"User Account Added!","SUCCESS!",JOptionPane.INFORMATION_MESSAGE);
    }catch(Exception e){JOptionPane.showMessageDialog(null,e);}
}

//update User
private void updateUser(){
    try{
    sql = "UPDATE user_table SET employee_id=?,fullname=?,username=?,password=? WHERE id='"+tUserId.getText()+"'";
    ps = con.prepareStatement(sql);  
    ps.setString(1, tEmpId.getText());
    ps.setString(2, tFullName.getText());
    ps.setString(3, tUsername.getText());
    ps.setString(4, String.valueOf(tUserPass.getPassword()));
    ps.executeUpdate();
    updateProfileImage();
    getUsernamePicture(tUsername.getText());
    JOptionPane.showMessageDialog(null,"User Account Updated!","SUCCESS!",JOptionPane.INFORMATION_MESSAGE);
    }catch(Exception e){JOptionPane.showMessageDialog(null,e);}    
}

//update userImage
void updateProfileImage(){
    if(ImgPath!=null){
        try{
        sql = "UPDATE user_table SET photo=? WHERE id='"+tUserId.getText()+"'";
        ps = con.prepareStatement(sql); 
        InputStream img = new FileInputStream(new File(ImgPath));
        ps.setBlob(1, img);
        ps.executeUpdate();
        //JOptionPane.showMessageDialog(null,"Profile Picture Also Updated");
        }catch(Exception e){e.printStackTrace();}
    }
}

//get user table and put to an arraylist
public ArrayList<UserAccount>getUserList(String query){
        ArrayList<UserAccount>sublist = new ArrayList<>();
       //sql = "SELECT id,prod_id,prod_name,prod_price FROM `product` WHERE type='" + meal +"' ORDER BY prod_name";
       sql = query;
     
        try{
            st = con.createStatement();
            rs=st.executeQuery(sql);
           UserAccount userAccount;
            while(rs.next()){
                userAccount = new UserAccount(rs.getInt("id"),rs.getString("employee_id")
                ,rs.getString("fullname"),rs.getString("username"),rs.getString("password"),rs.getBytes("photo"));
                sublist.add(userAccount);
            }
        }
        catch(SQLException e){JOptionPane.showMessageDialog(null,e);}
        return sublist;
}

//show User on table
private void showUserTable(String query){
        ArrayList<UserAccount>list = getUserList(query);
        DefaultTableModel model = (DefaultTableModel) jUserTable.getModel();
        DefaultTableCellRenderer centerRender = new DefaultTableCellRenderer();
        centerRender.setHorizontalAlignment( SwingConstants.LEFT );
        jUserTable.getColumnModel().getColumn(2).setCellRenderer( centerRender );       
//set table contents
        model.setRowCount(0);
        Object[] row = new Object [3];
        for(int i = 0;i<list.size();i++){
        row[0] = list.get(i).getId();
        row[1] = list.get(i).getUsername();
        row[2] = list.get(i).getFullName();
        
        model.addRow(row);
        }   
}

//getDesert info
void getUser(int index,String query){
        try{
        tUserId.setText(Integer.toString(getUserList(query).get(index).getId()));
        tEmpId.setText(getUserList(query).get(index).getEmpId());
        tFullName.setText(getUserList(query).get(index).getFullName());
        tUsername.setText(getUserList(query).get(index).getUsername());
        tUserPass.setText(getUserList(query).get(index).getPassword());
        byte[] img = getUserList(query).get(index).getPhoto();
        ImageIcon image = new ImageIcon(img);
        Image im = image.getImage();
        Image myImg = im.getScaledInstance(jPicture.getWidth(), jPicture.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon newImage = new ImageIcon(myImg);
        jPicture.setIcon(newImage);
        
        btnSaveUser.setText("UPDATE");
        btnDeleteUser.setText("DISCARD");
        btnDeleteUser.setEnabled(true);
        }
        catch(Exception e){e.printStackTrace();}
    }

//show product table to select order
void showProductTable(String query){
        ArrayList<Product>list = getProductList(query);
        DefaultTableModel model = (DefaultTableModel) jProductTable.getModel();
        DefaultTableCellRenderer centerRender = new DefaultTableCellRenderer();
        centerRender.setHorizontalAlignment( SwingConstants.LEFT );
        jProductTable.getColumnModel().getColumn(3).setCellRenderer( centerRender );       
//set table contents
        model.setRowCount(0);
        Object[] row = new Object [4];
        for(int i = 0;i<list.size();i++){
        row[0] = list.get(i).getId();
        row[1] = list.get(i).getProdId();
        row[2] = list.get(i).getProdName();
        row[3] = list.get(i).getProdPrice();
        model.addRow(row);
        }   
}

//searchProduct to order
void searchProduct(){
    if (cmbType.getSelectedIndex()>1){
        type=cmbType.getSelectedItem().toString();
    }else{type="";}
    try{sql = "select * from product where concat(prod_id,prod_name) Like '%" + txtSearch.getText().trim() +
      "%' and type = '" + type + "'";
      showProductTable(sql);}catch(Exception e){e.printStackTrace();}
}

//spinner accept number only
void acceptNumber(javax.swing.JSpinner jspinner){
    JFormattedTextField numOnly=((JSpinner.NumberEditor)jspinner.getEditor()).getTextField();
    ((NumberFormatter)numOnly.getFormatter()).setAllowsInvalid(false);
}

//clear Order
void clearOrderSelection(){
    lblProdId.setText("#");
    lblProdName.setText("None");
    lblProdPrice.setText("0");
    jQuantity.setValue(1);
    btnAddOrder.setEnabled(false);
    lblPriceTotal.setText("0.00");
}

//calculate Price
void calculatePrice(){
    double prod_price;
    int prod_quantity;
    double totalPrice;
    
    prod_price=Double.parseDouble(lblProdPrice.getText());
    prod_quantity=Integer.parseInt(jQuantity.getValue().toString());
    totalPrice=prod_price*prod_quantity;
    lblPriceTotal.setText(String.format("%.2f",totalPrice));
}

//get Product Detail
void getProduct(int index,String query){
        try{
        lblProdId.setText(getProductList(query).get(index).getProdId());
        lblProdName.setText(getProductList(query).get(index).getProdName());
        lblProdPrice.setText(Double.toString(getProductList(query).get(index).getProdPrice()));
        type=getProductList(query).get(index).getProdType();
        btnAddOrder.setEnabled(true);
        }
        catch(Exception e){e.printStackTrace();}
    }

//Add Order
private void addOrder(){
    try{
  SimpleDateFormat sdf = new SimpleDateFormat("yyyy-M-d");
  String dateCreated = sdf.format(date);
  
                sql = "insert into bill_content(bill_id,prod_id,prod_name,quantity,prod_price,type,dateCreated)values(?,?,?,?,?,?,?)";
                ps = con.prepareStatement(sql);
                ps.setString(1,receiptNo.getText());
                ps.setString(2,lblProdId.getText());
                ps.setString(3,lblProdName.getText());
                ps.setInt(4,Integer.parseInt(jQuantity.getValue().toString()));
                ps.setDouble(5,Double.parseDouble(lblPriceTotal.getText()));
                ps.setString(6,type);
                ps.setString(7,dateCreated);
                ps.execute();
                JOptionPane.showMessageDialog(null,"Order Added To List!","SUCCESS!",JOptionPane.INFORMATION_MESSAGE);
            }
            catch(HeadlessException | NumberFormatException | SQLException e){
                JOptionPane.showMessageDialog(null,e);
            }
}

//get Bill Content and put to an arraylist
public ArrayList<BillContent>getBillContent(){
        ArrayList<BillContent>sublist = new ArrayList<>();
       //sql = "SELECT id,prod_id,prod_name,prod_price FROM `product` WHERE type='" + meal +"' ORDER BY prod_name";
       sql = "SELECT bill_id,prod_id,prod_name,quantity,prod_price,type FROM `bill_content` WHERE bill_id='"+receiptNo.getText()+"'";
     
        try{
            st = con.createStatement();
            rs=st.executeQuery(sql);
           BillContent billContent;
            while(rs.next()){
                billContent = new BillContent(rs.getString("bill_id"),rs.getString("prod_id"),
                rs.getString("prod_name"),rs.getInt("quantity")
                ,rs.getDouble("prod_price"),rs.getString("type"));
                sublist.add(billContent);
            }
        }
        catch(SQLException e){JOptionPane.showMessageDialog(null,e);}
        return sublist;
}

//show Bill Content by where bill id
private void showBillContent(){
        ArrayList<BillContent>list = getBillContent();
        DefaultTableModel model = (DefaultTableModel) jOrderTable.getModel();
        DefaultTableCellRenderer centerRender = new DefaultTableCellRenderer();
        centerRender.setHorizontalAlignment( SwingConstants.LEFT );
        jOrderTable.getColumnModel().getColumn(4).setCellRenderer( centerRender );       
//set table contents
        model.setRowCount(0);
        Object[] row = new Object [6];
        for(int i = 0;i<list.size();i++){
        row[0] = list.get(i).getBillId();
        row[1] = list.get(i).getQuantity();
        row[2] = list.get(i).getProdName();
        row[3] = list.get(i).getType();
        row[4] = list.get(i).getProdPrice();
        row[5] = list.get(i).getProdId();
        
        model.addRow(row);
        }   
}

//calculate Total Amount Due
public double getTotalAmountDue(){
double total=0;
try{
for (int i=0; i<jOrderTable.getRowCount();i++){
double amount=Double.parseDouble(jOrderTable.getValueAt(i,4).toString());
total=total+amount;
}tTotalAmount.setText(String.format("%1$,.2f",total));
}catch(Exception e ){e.printStackTrace();}
return total;
}

//check if item order is already at table
int getQuantity;
double getPrice;
public boolean checkOrder(){
    try{
    st=con.createStatement();
    sql="SELECT quantity,prod_price from bill_content WHERE prod_id='"+lblProdId.getText()+"' AND bill_id='"+receiptNo.getText()+"'";
    rs=st.executeQuery(sql);
    if(rs.next()){
        b=true;
        getQuantity=rs.getInt("quantity");
        getPrice=rs.getDouble("prod_price");
    }else{b=false;}
    }catch(SQLException e){JOptionPane.showMessageDialog(null,e);}
    return b;
}

//update ordered item
void updateOrderedItem(){
try{
int newQuantity=getQuantity+Integer.parseInt(jQuantity.getValue().toString());
double newPrice=getPrice+Double.parseDouble(lblPriceTotal.getText());

ps = con.prepareStatement("Update bill_content set quantity=?,prod_price=?"
        + " WHERE bill_id='"+receiptNo.getText()+"' AND prod_id ='"+ lblProdId.getText()+"'");
ps.setInt(1,newQuantity);
ps.setDouble(2,Double.parseDouble(String.format("%.2f",newPrice)));
ps.executeUpdate();
JOptionPane.showMessageDialog(null,"Order Added!", "SUCCESS!", JOptionPane.INFORMATION_MESSAGE);
showBillContent();
}catch(Exception e){ e.printStackTrace();}
}

//CHECK IF BILL ID ALREADY EXIST
private boolean checkBillId(){
    try{
    st=con.createStatement();
    sql="SELECT bill_id from bill_table WHERE bill_id='"+receiptNo.getText()+"'";
    rs=st.executeQuery(sql);
    if(rs.next()){
        b=true;
    }else{b=false;}
    }catch(SQLException e){JOptionPane.showMessageDialog(null,e);}
    return b;
}

//saveBill
private void saveBill(){
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-M-d");
String dateCreated = sdf.format(date);
    try{
    sql="INSERT INTO bill_table(bill_id,table_no,totalPrice,dateCreated)values(?,?,?,?)";
    ps=con.prepareStatement(sql);
    ps.setString(1,receiptNo.getText());
    ps.setInt(2,Integer.parseInt(jTableNo.getValue().toString()));
    ps.setDouble(3,getTotalAmountDue());
    ps.setString(4,dateCreated);
    ps.execute();
    JOptionPane.showMessageDialog(null,"Bill Saved!","SUCCESS",JOptionPane.INFORMATION_MESSAGE);
    }catch(Exception e){JOptionPane.showMessageDialog(null,e);}
}

//printBill
private void printBill(String query){
   try{
    ClassLoader classLoader =getClass().getClassLoader();
    InputStream path =classLoader.getResourceAsStream("Report/billPrint.jrxml");
    
    JasperDesign jasper= JRXmlLoader.load(path);
    sql=query;
    JRDesignQuery newQuery= new JRDesignQuery();
    newQuery.setText(sql);
    jasper.setQuery(newQuery);
    JasperReport js=JasperCompileManager.compileReport(jasper);
    JasperPrint jp=JasperFillManager.fillReport(js,null,con);
    JasperViewer.viewReport(jp,false);
    }catch(JRException e){JOptionPane.showMessageDialog(null,e);}
  
}
//get and generate Receiptid based on max(id)
int getBillId(){
    try{
    st=con.createStatement();
    sql="SELECT MAX(id) from bill_table LIMIT 1";
    rs=st.executeQuery(sql);
    rs.next();
    maxCount=rs.getInt(1)+1;
    }catch(Exception e){e.printStackTrace();}
     return maxCount;
}

//get and generate mealID based on max(id)
int getMealId(){
    try{
    st=con.createStatement();
    sql="SELECT MAX(baseid) from product WHERE type='"+food+"' LIMIT 1";
    rs=st.executeQuery(sql);
    rs.next();
    maxCount=rs.getInt(1)+1;
    }catch(Exception e){e.printStackTrace();}
     return maxCount;
}

//get and generate drinkID based on max(id)
int getDrinkId(){
    try{
    st=con.createStatement();
    sql="SELECT MAX(baseid) from product WHERE type='"+coffee+"' LIMIT 1";
    rs=st.executeQuery(sql);
    rs.next();
    maxCount=rs.getInt(1)+1;
    }catch(Exception e){e.printStackTrace();}
     return maxCount;
}

//get and generate mealID based on max(id)
int getDessertId(){
    try{
    st=con.createStatement();
    sql="SELECT MAX(baseid) from product WHERE type='"+pastry+"' LIMIT 1";
    rs=st.executeQuery(sql);
    rs.next();
    maxCount=rs.getInt(1)+1;
    }catch(Exception e){e.printStackTrace();}
     return maxCount;
}

//generateNewBillID
void newBillId(){
  cal= Calendar.getInstance(); 
  cal.setTime(date);
  int yearNow=cal.get(Calendar.YEAR);
  receiptNo.setText("JRE"+yearNow+"-"+String.format("%04d",getBillId()));
}
//generateNewMealID
void newFoodId(){
    tFoodId.setText("FOOD-"+String.format("%03d",getMealId()));
}

//generateNewRandomMealID
void newCoffeeId(){
    tCoffeeId.setText("COFFEE-"+String.format("%03d",getDrinkId()));
}

//generateNewRandom Desert ID
void newPastryId(){
  tPastryId.setText("PASTRY-"+String.format("%03d",getDessertId()));
}

//check if record already exist
public boolean checkRecords(String id){
        try{
            sql="Select prod_id from product where prod_id='"+id+"'";
            st =con.createStatement();
            rs=st.executeQuery(sql);
            
            b = rs.next();
            
        }catch(Exception e){e.printStackTrace();}
        return b;
    }
 
//get Product and put to Array List
public ArrayList<Product>getProductList(String query){
        ArrayList<Product>sublist = new ArrayList<>();
       //sql = "SELECT id,prod_id,prod_name,prod_price FROM `product` WHERE type='" + meal +"' ORDER BY prod_name";
       sql = query;
     
        try{
            st = con.createStatement();
            rs=st.executeQuery(sql);
           Product product;
            while(rs.next()){
                product = new Product(rs.getInt("id"),rs.getString("prod_id"),
                rs.getString("prod_name"),rs.getDouble("prod_price"),rs.getString("type"));
                sublist.add(product);
            }
        }
        catch(SQLException e){JOptionPane.showMessageDialog(null,e);}
        return sublist;
}

//populate mealTable
void showMealTable(String query){
        ArrayList<Product>list = getProductList(query);
        DefaultTableModel model = (DefaultTableModel) jMealTable.getModel();
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment( SwingConstants.LEFT );
        jMealTable.getColumnModel().getColumn(3).setCellRenderer(leftRenderer );       
//set table contents
        model.setRowCount(0);
        Object[] row = new Object [4];
        for(int i = 0;i<list.size();i++){
        row[0] = list.get(i).getId();
        row[1] = list.get(i).getProdId();
        row[2] = list.get(i).getProdName();
        row[3] = list.get(i).getProdPrice();
        model.addRow(row);
        }   
}

//print Meal
private void printFood() {
   try{
    
    ClassLoader classLoader =getClass().getClassLoader();
    InputStream path =classLoader.getResourceAsStream("Report/printProduct.jrxml");
       
    JasperDesign jasper= JRXmlLoader.load(path);
    sql="SELECT * FROM product WHERE type='"+food+"'";
    JRDesignQuery newQuery= new JRDesignQuery();
    newQuery.setText(sql);
    jasper.setQuery(newQuery);
    JasperReport js=JasperCompileManager.compileReport(jasper);
    JasperPrint jp=JasperFillManager.fillReport(js,null,con);
    JasperViewer.viewReport(jp,false);
    }catch(JRException e){JOptionPane.showMessageDialog(null,e);}
  
}

//save Meal
void saveMeal(){
    try{
                sql = "insert into product(baseid,prod_id,prod_name,prod_price,type)values(?,?,?,?,?)";
                ps = con.prepareStatement(sql);
                ps.setInt(1,getMealId());
                ps.setString(2,tFoodId.getText());
                ps.setString(3,tMealName.getText());
                ps.setDouble(4,Double.parseDouble(tMealPrice.getText()));
                ps.setString(5,food);
                ps.execute();
                JOptionPane.showMessageDialog(null,"Successfully Save","SUCCESS!",JOptionPane.INFORMATION_MESSAGE);
                sql = "SELECT id,prod_id,prod_name,prod_price,type FROM `product` WHERE type='" + food +"' ";
                showMealTable(sql);
            }
            catch(HeadlessException | NumberFormatException | SQLException e){
                JOptionPane.showMessageDialog(null,e);
            }
}

//UPDATE MEAL
void updateMeal(){
try{
ps = con.prepareStatement("Update product set prod_id=?,prod_name=?,prod_price=? WHERE id ='"+ id+"'");
ps.setString(1,tFoodId.getText());
ps.setString(2,tMealName.getText());
ps.setString(3,tMealPrice.getText());
ps.executeUpdate();
JOptionPane.showMessageDialog(null,"Selected Meal Updated!", "SUCCESS!", JOptionPane.INFORMATION_MESSAGE);
sql = "select * from product where concat(id,prod_id,prod_name) Like '%" + txtMealSearch.getText() + "%' and type='" + food + "'";
showMealTable(sql);
}catch(Exception e){ e.printStackTrace();}
}

//delete meal
void deleteMeal(){
    try{
    ps = con.prepareStatement("DELETE FROM product WHERE prod_id=?");
    ps.setString(1,tFoodId.getText());
    ps.executeUpdate();
    JOptionPane.showMessageDialog(null,"Selected Meal Deleted!","DELETED!",JOptionPane.INFORMATION_MESSAGE);
    sql = "select * from product where concat(id,prod_id,prod_name) Like '%" + txtMealSearch.getText() + "%' and type='" + food + "'";
    showMealTable(sql);
    clearMeal();
      }catch(Exception e){e.printStackTrace();}
}

//checkMealInput
boolean checkMealInput(){
if(tFoodId.getText().equals("")){
    JOptionPane.showMessageDialog(null,"Meal ID is Empty!"); tFoodId.requestFocus(); b=false;
}else if(tMealName.getText().equals("")){
    JOptionPane.showMessageDialog(null,"Meal Name is Empty!"); tMealName.requestFocus(); b=false;
}else if(tMealPrice.getText().equals("")){
    JOptionPane.showMessageDialog(null,"Meal Price is Empty!"); tMealPrice.requestFocus(); b=false;
}else{
    b=true;
}
return b;
}

//getMeal
void getMeal(int index){
        try{
        if (index >= 0){
        DefaultTableModel dtm = (DefaultTableModel) jMealTable.getModel();
        id= Integer.parseInt(dtm.getValueAt(index,0).toString()); 
        tFoodId.setText(dtm.getValueAt(index,1).toString());
        tMealName.setText(dtm.getValueAt(index,2).toString());
        tMealPrice.setText(dtm.getValueAt(index,3).toString());
        btnMealSave.setText("UPDATE");
        btnMealClear.setText("DISCARD");
        btnMealDelete.setEnabled(true);
        }

        }
        catch(Exception e){e.printStackTrace();}
    }

//clearMeal
void clearMeal(){
    tMealName.setText(null);
    tMealPrice.setText(null);
    btnMealSave.setText("SAVE");
    btnMealDelete.setEnabled(false);
    btnMealClear.setText("CLEAR");
    newFoodId();
}

//showDrinkTable
void showDrinkTable(String query){
        ArrayList<Product>list = getProductList(query);
        DefaultTableModel model = (DefaultTableModel) jDrinkTable.getModel();
        DefaultTableCellRenderer centerRender = new DefaultTableCellRenderer();
        centerRender.setHorizontalAlignment( SwingConstants.LEFT );
        jDrinkTable.getColumnModel().getColumn(3).setCellRenderer( centerRender );       
//set table contents
        model.setRowCount(0);
        Object[] row = new Object [4];
        for(int i = 0;i<list.size();i++){
        row[0] = list.get(i).getId();
        row[1] = list.get(i).getProdId();
        row[2] = list.get(i).getProdName();
        row[3] = list.get(i).getProdPrice();
        model.addRow(row);
        }   
}

//print Drinks
private void printCoffee(){
   try{
    ClassLoader classLoader =getClass().getClassLoader();
    InputStream path =classLoader.getResourceAsStream("Report/printProduct.jrxml");
    
    JasperDesign jasper= JRXmlLoader.load(path);
    sql="SELECT * FROM product WHERE type='"+coffee+"'";
    JRDesignQuery newQuery= new JRDesignQuery();
    newQuery.setText(sql);
    jasper.setQuery(newQuery);
    JasperReport js=JasperCompileManager.compileReport(jasper);
    JasperPrint jp=JasperFillManager.fillReport(js,null,con);
    JasperViewer.viewReport(jp,false);
    }catch(JRException e){JOptionPane.showMessageDialog(null,e);}
  
}

//saveDrink
void saveDrink(){
    try{
                sql = "insert into product(baseid,prod_id,prod_name,prod_price,type)values(?,?,?,?,?)";
                ps = con.prepareStatement(sql);
                ps.setInt(1,getDrinkId());
                ps.setString(2,tCoffeeId.getText());
                ps.setString(3,tDrinkName.getText());
                ps.setDouble(4,Double.parseDouble(tDrinkPrice.getText()));
                ps.setString(5,coffee);
                ps.execute();
                JOptionPane.showMessageDialog(null,"Successfully Saved","SUCCESS!",JOptionPane.INFORMATION_MESSAGE);
                sql = "SELECT id,prod_id,prod_name,prod_price,type FROM `product` WHERE type='" + coffee +"'";
                showDrinkTable(sql);
            }
            catch(HeadlessException | NumberFormatException | SQLException e){
                JOptionPane.showMessageDialog(null,e);
            }
}

//update drinks
void updateDrink(){
try{
ps = con.prepareStatement("Update product set prod_id=?,prod_name=?,prod_price=? WHERE id ='"+ id+"'");
ps.setString(1,tCoffeeId.getText());
ps.setString(2,tDrinkName.getText());
ps.setString(3,tDrinkPrice.getText());
ps.executeUpdate();
JOptionPane.showMessageDialog(null,"Selected Drink Updated!", "SUCCESS!", JOptionPane.INFORMATION_MESSAGE);
sql = "select * from product where concat(id,prod_id,prod_name) Like '%" + txtDrinkSearch.getText() + "%' and type='" + coffee + "'";
showDrinkTable(sql);
}catch(Exception e){ e.printStackTrace();}
}

//delete drink
void deleteDrink(){
    try{
    ps = con.prepareStatement("DELETE FROM product WHERE prod_id=?");
    ps.setString(1,tCoffeeId.getText());
    ps.executeUpdate();
    JOptionPane.showMessageDialog(null,"Selected Drink Deleted!","DELETED!",JOptionPane.INFORMATION_MESSAGE);
    sql = "select * from product where concat(id,prod_id,prod_name) Like '%" + txtDrinkSearch.getText() + "%' and type='" + coffee + "'";
    showDrinkTable(sql);
    clearDrink();
      }catch(Exception e){e.printStackTrace();}
}

//check drink input
boolean checkDrinkInput(){
if(tCoffeeId.getText().equals("")){
    JOptionPane.showMessageDialog(null,"Drink ID is Empty!"); tCoffeeId.requestFocus(); b=false;
}else if(tDrinkName.getText().equals("")){
    JOptionPane.showMessageDialog(null,"Drink Name is Empty!"); tDrinkName.requestFocus(); b=false;
}else if(tDrinkPrice.getText().equals("")){
    JOptionPane.showMessageDialog(null,"Drink Price is Empty!"); tDrinkPrice.requestFocus(); b=false;
}else{
    b=true;
}
return b;
}

//get Drink Detail
void getDrink(int index){
    try{
        if (index >= 0){
        DefaultTableModel dtm = (DefaultTableModel) jDrinkTable.getModel();
        id= Integer.parseInt(dtm.getValueAt(index,0).toString()); 
        tCoffeeId.setText(dtm.getValueAt(index,1).toString());
        tDrinkName.setText(dtm.getValueAt(index,2).toString());
        tDrinkPrice.setText(dtm.getValueAt(index,3).toString());
        btnDrinkSave.setText("UPDATE");
        btnDrinkClear.setText("DISCARD");
        btnDrinkDelete.setEnabled(true);
        }
        }
        catch(Exception e){e.printStackTrace();}
    }

//clear drink field
void clearDrink(){
    tDrinkName.setText(null);
    tDrinkPrice.setText(null);
    btnDrinkSave.setText("SAVE");
    btnDrinkDelete.setEnabled(false);
    btnDrinkClear.setText("CLEAR");
    newCoffeeId();
}

//showDesertTable
void showDessertTable(String query){
        ArrayList<Product>list = getProductList(query);
        DefaultTableModel model = (DefaultTableModel) jDessertTable.getModel();
        DefaultTableCellRenderer centerRender = new DefaultTableCellRenderer();
        centerRender.setHorizontalAlignment( SwingConstants.LEFT );
        jDessertTable.getColumnModel().getColumn(3).setCellRenderer( centerRender );       
//set table contents
        model.setRowCount(0);
        Object[] row = new Object [4];
        for(int i = 0;i<list.size();i++){
        row[0] = list.get(i).getId();
        row[1] = list.get(i).getProdId();
        row[2] = list.get(i).getProdName();
        row[3] = list.get(i).getProdPrice();
        model.addRow(row);
        }   
}

//print Dessert
private void printDessert(){
   try{
    ClassLoader classLoader =getClass().getClassLoader();
    InputStream path =classLoader.getResourceAsStream("Report/printProduct.jrxml");
    
    JasperDesign jasper= JRXmlLoader.load(path);
    sql="SELECT * FROM product WHERE type='"+pastry+"'";
    JRDesignQuery newQuery= new JRDesignQuery();
    newQuery.setText(sql);
    jasper.setQuery(newQuery);
    JasperReport js=JasperCompileManager.compileReport(jasper);
    JasperPrint jp=JasperFillManager.fillReport(js,null,con);
    JasperViewer.viewReport(jp,false);
    }catch(JRException e){JOptionPane.showMessageDialog(null,e);}
  
}

//saveDesert
void saveDessert(){
    try{
                sql = "insert into product(baseid,prod_id,prod_name,prod_price,type)values(?,?,?,?,?)";
                ps = con.prepareStatement(sql);
                ps.setInt(1,getDessertId());
                ps.setString(2,tPastryId.getText());
                ps.setString(3,tDessertName.getText());
                ps.setDouble(4,Double.parseDouble(tDessertPrice.getText()));
                ps.setString(5,pastry);
                ps.execute();
                JOptionPane.showMessageDialog(null,"Successfully Saved","SUCCESS!",JOptionPane.INFORMATION_MESSAGE);
                sql = "SELECT id,prod_id,prod_name,prod_price,type FROM `product` WHERE type='" + pastry +"'";
                showDessertTable(sql);
            }
            catch(HeadlessException | NumberFormatException | SQLException e){
                JOptionPane.showMessageDialog(null,e);
            }
}

//update Desert
void updateDessert(){
try{
ps = con.prepareStatement("Update product set prod_id=?,prod_name=?,prod_price=? WHERE id='"+ id +"'");
ps.setString(1,tPastryId.getText());
ps.setString(2,tDessertName.getText());
ps.setString(3,tDessertPrice.getText());
ps.executeUpdate();
JOptionPane.showMessageDialog(null,"Selected Desert Updated!", "SUCCESS!", JOptionPane.INFORMATION_MESSAGE);
sql = "select * from product where concat(id,prod_id,prod_name) Like '%" + txtDessertSearch.getText() + "%' and type='" + pastry + "'";
showDessertTable(sql);
}catch(Exception e){ e.printStackTrace();}
}

//delete desert
void deleteDessert(){
    try{
    ps = con.prepareStatement("DELETE FROM product WHERE prod_id=?");
    ps.setString(1,tPastryId.getText());
    ps.executeUpdate();
    JOptionPane.showMessageDialog(null,"Selected Drink Deleted!","DELETED!",JOptionPane.INFORMATION_MESSAGE);
    sql = "select * from product where concat(id,prod_id,prod_name) Like '%" + txtDessertSearch.getText() + "%' and type='" + pastry + "'";
    showDessertTable(sql);
    clearDessert();
      }catch(Exception e){e.printStackTrace();}
}

//validate desert input
boolean checkDessertInput(){
if(tPastryId.getText().equals("")){
    JOptionPane.showMessageDialog(null,"Desert ID is Empty!"); tPastryId.requestFocus(); b=false;
}else if(tDessertName.getText().equals("")){
    JOptionPane.showMessageDialog(null,"Desert Name is Empty!"); tDessertName.requestFocus(); b=false;
}else if(tDessertPrice.getText().equals("")){
    JOptionPane.showMessageDialog(null,"Desert Price is Empty!"); tDessertPrice.requestFocus(); b=false;
}else{
    b=true;
}
return b;
}

//getDesert info
void getDessert(int index){
    try{
    if (index >= 0){
    DefaultTableModel dtm = (DefaultTableModel) jDessertTable.getModel();
    id= Integer.parseInt(dtm.getValueAt(index,0).toString());
    tPastryId.setText(dtm.getValueAt(index,1).toString());
    tDessertName.setText(dtm.getValueAt(index,2).toString());
    tDessertPrice.setText(dtm.getValueAt(index,3).toString());
    btnDessertSave.setText("UPDATE");
    btnDessertClear.setText("DISCARD");
    btnDessertDelete.setEnabled(true);
    }
    }catch(Exception e){e.printStackTrace();}
    }

//clear desert 
void clearDessert(){
    tDessertName.setText(null);
    tDessertPrice.setText(null);
    btnDessertSave.setText("SAVE");
    btnDessertDelete.setEnabled(false);
    btnDessertClear.setText("CLEAR");
    newPastryId();
}
    
    private void btnCofeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCofeeActionPerformed
    jMainPanelSlider.nextPanel(5, panelFoods, JPanelSlider.right);
    }//GEN-LAST:event_btnCofeeActionPerformed

    private void btnOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderActionPerformed
    jMainPanelSlider.nextPanel(5, panelOrder, JPanelSlider.right);  
    }//GEN-LAST:event_btnOrderActionPerformed

    private void btnBillsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBillsActionPerformed
    jMainPanelSlider.nextPanel(5, panelBills, JPanelSlider.right);
    }//GEN-LAST:event_btnBillsActionPerformed

    private void btnFoodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFoodsActionPerformed
    jMainPanelSlider.nextPanel(5, panelCoffee, JPanelSlider.right);
    }//GEN-LAST:event_btnFoodsActionPerformed

    private void btnPastryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPastryActionPerformed
    jMainPanelSlider.nextPanel(5, panelPastry, JPanelSlider.right);
    }//GEN-LAST:event_btnPastryActionPerformed

    private void btnUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserActionPerformed
    jMainPanelSlider.nextPanel(5, panelUser, JPanelSlider.right);
    }//GEN-LAST:event_btnUserActionPerformed

    private void btnMealSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMealSaveActionPerformed
if(checkMealInput()==true){
    if(btnMealSave.getText().equals("SAVE")){
        if (checkRecords(tFoodId.getText())!=true){ 
        saveMeal();
        clearMeal();
        newFoodId(); 
        }else{JOptionPane.showMessageDialog(null,"ID Already Exist.\nTry Again","ERROR",JOptionPane.ERROR_MESSAGE);newCoffeeId();}      
        }else{ //update
        updateMeal();
        clearMeal();
        newFoodId();
    }    
    
}
    }//GEN-LAST:event_btnMealSaveActionPerformed

    private void tMealPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tMealPriceKeyTyped
        if (Character.isLetter(evt.getKeyChar())&&!evt.isAltDown())evt.consume();
    }//GEN-LAST:event_tMealPriceKeyTyped

    private void txtMealSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMealSearchKeyTyped
      try{sql = "select * from product where concat(id,prod_id,prod_name) Like '%" + txtMealSearch.getText().trim() + "%' and type='" + food + "'";
      showMealTable(sql);}catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_txtMealSearchKeyTyped

    private void jMealTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMealTableMouseClicked
      try{int index=jMealTable.getSelectedRow();
      getMeal(index);}catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_jMealTableMouseClicked

    private void btnMealClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMealClearActionPerformed
       clearMeal();
    }//GEN-LAST:event_btnMealClearActionPerformed

    private void headerPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerPanelMouseDragged
int x = evt.getXOnScreen(); int y = evt.getYOnScreen(); this.setLocation(x-xx,y-xy);
    }//GEN-LAST:event_headerPanelMouseDragged

    private void headerPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerPanelMousePressed
xx = evt.getX();  xy = evt.getY();
    }//GEN-LAST:event_headerPanelMousePressed

    private void btnMealDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMealDeleteActionPerformed
        deleteMeal();
    }//GEN-LAST:event_btnMealDeleteActionPerformed

    private void tMealNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tMealNameFocusLost
        tMealName.setText(toUpperCase(tMealName.getText()));
    }//GEN-LAST:event_tMealNameFocusLost

    private void jDrinkTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDrinkTableMouseClicked
    try{int index=jDrinkTable.getSelectedRow();
    getDrink(index);}catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_jDrinkTableMouseClicked

    private void btnDrinkSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrinkSaveActionPerformed
if(checkDrinkInput()==true){
    if(btnDrinkSave.getText().equals("SAVE")){
        if (checkRecords(tCoffeeId.getText())!=true){ 
        saveDrink();
        clearDrink();
        newCoffeeId(); 
        }else{JOptionPane.showMessageDialog(null,"ID Already Exist.\nTry Again","ERROR",JOptionPane.ERROR_MESSAGE);newCoffeeId();}   
        }else{ //update
        updateDrink();
        clearDrink();
        newCoffeeId();
    }    
    
}
    }//GEN-LAST:event_btnDrinkSaveActionPerformed

    private void btnDrinkDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrinkDeleteActionPerformed
        deleteDrink();
    }//GEN-LAST:event_btnDrinkDeleteActionPerformed

    private void btnDrinkClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrinkClearActionPerformed
        clearDrink();
    }//GEN-LAST:event_btnDrinkClearActionPerformed

    private void txtDrinkSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDrinkSearchKeyTyped
      try{sql = "select * from product where concat(id,prod_id,prod_name) Like '%" + txtDrinkSearch.getText().trim() + "%' and type='" + coffee + "'";
      showDrinkTable(sql);}catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_txtDrinkSearchKeyTyped

    private void tDrinkNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tDrinkNameFocusLost
    tDrinkName.setText(toUpperCase(tDrinkName.getText()));
    }//GEN-LAST:event_tDrinkNameFocusLost

    private void tDrinkPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tDrinkPriceKeyTyped
if (Character.isLetter(evt.getKeyChar())&&!evt.isAltDown())evt.consume(); 
    }//GEN-LAST:event_tDrinkPriceKeyTyped

    private void jDessertTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDessertTableMouseClicked
    try{int index=jDessertTable.getSelectedRow();
    getDessert(index);}catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_jDessertTableMouseClicked

    private void btnDessertSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDessertSaveActionPerformed
if(checkDessertInput()==true){
    if(btnDessertSave.getText().equals("SAVE")){
        if (checkRecords(tPastryId.getText())!=true){ 
        saveDessert();
        clearDessert();
        newPastryId(); 
        }else{JOptionPane.showMessageDialog(null,"ID Already Exist.\nTry Again","ERROR",JOptionPane.ERROR_MESSAGE);newPastryId();}   
        }else{ //update
        updateDessert();
        clearDessert();
        newPastryId();
    }    
    
}
    }//GEN-LAST:event_btnDessertSaveActionPerformed

    private void btnDessertDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDessertDeleteActionPerformed
    deleteDessert();
    }//GEN-LAST:event_btnDessertDeleteActionPerformed

    private void btnDessertClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDessertClearActionPerformed
    clearDessert();
    }//GEN-LAST:event_btnDessertClearActionPerformed

    private void tDessertPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tDessertPriceKeyTyped
    if (Character.isLetter(evt.getKeyChar())&&!evt.isAltDown())evt.consume(); 
    }//GEN-LAST:event_tDessertPriceKeyTyped

    private void tDessertNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tDessertNameFocusLost
    tDessertName.setText(toUpperCase(tDessertName.getText()));
    }//GEN-LAST:event_tDessertNameFocusLost

    private void txtDessertSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDessertSearchKeyTyped
    try{sql = "select * from product where concat(id,prod_id,prod_name) Like '%" + txtDessertSearch.getText().trim() + "%' and type='" + pastry + "'";
    showDessertTable(sql);}catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_txtDessertSearchKeyTyped

    private void jOrderTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jOrderTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jOrderTableMouseClicked

    private void jProductTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jProductTableMouseClicked
    try{
    clearOrderSelection();
    int index=jProductTable.getSelectedRow();
    if(txtSearch.getText().equals("")||txtSearch.getText()
.equals("Search Meal /Drinks /Dessert..")||cmbType.getSelectedItem().toString().equals("")){
    sql = "select * from product where concat(id,prod_id,prod_name)Like '%" + "" + "%' ";
    }else{
    sql ="select * from product where concat(prod_id,prod_name) Like '%" + txtSearch.getText() +
      "%' and type LIKE '%" + type + "%'";;
    }
    
    getProduct(index,sql);
    calculatePrice();
    }catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_jProductTableMouseClicked

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
if(txtSearch.getText().equals("")||txtSearch.getText()
.equals("Search Meal /Drinks /Dessert..")||cmbType.getSelectedItem().toString().equals("")){
    try{sql = "select * from product where concat(id,prod_id,prod_name)Like '%" + "" + "%' ";
    showProductTable(sql);}catch(Exception e){e.printStackTrace();}
}else{
    searchProduct();
}
    }//GEN-LAST:event_txtSearchKeyTyped

    private void cmbTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTypeItemStateChanged
    if (cmbType.getSelectedIndex()>1){
        type=cmbType.getSelectedItem().toString();
    }else{type="";}

if(txtSearch.getText().equals("")||txtSearch.getText()
.equals("txtSearch.getText().equals(\"\")")||cmbType.getSelectedItem().toString().equals("")){
    try{sql = "select * from product where concat(id,prod_id,prod_name)Like '%" + "" + "%' ";
    showProductTable(sql);}catch(Exception e){e.printStackTrace();}
}else{
    searchProduct();
}
    }//GEN-LAST:event_cmbTypeItemStateChanged

    private void btnAddOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOrderActionPerformed
if(checkOrder()!=true){
    addOrder();
    showBillContent();
    getTotalAmountDue();
    clearOrderSelection();
}else{
    updateOrderedItem();
    showBillContent();
    getTotalAmountDue();
    clearOrderSelection();
    }
    }//GEN-LAST:event_btnAddOrderActionPerformed

    private void jDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteItemActionPerformed
    int index=jOrderTable.getSelectedRow();
        try{
    ps = con.prepareStatement("DELETE FROM bill_content WHERE prod_id=? and bill_id=?");
    ps.setString(1,getBillContent().get(index).getProdId());
    ps.setString(2,getBillContent().get(index).getBillId());
    ps.executeUpdate();
    JOptionPane.showMessageDialog(null,"Selected Order Deleted!","DELETED!",JOptionPane.INFORMATION_MESSAGE);
    showBillContent();
    getTotalAmountDue();
      }catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_jDeleteItemActionPerformed

    private void jQuantityMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jQuantityMouseMoved
    acceptNumber(jQuantity);
    calculatePrice();
    }//GEN-LAST:event_jQuantityMouseMoved

    private void jQuantityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jQuantityFocusLost
    acceptNumber(jQuantity);
    calculatePrice();
    }//GEN-LAST:event_jQuantityFocusLost

    private void jQuantityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jQuantityStateChanged
    acceptNumber(jQuantity);
    calculatePrice();
    }//GEN-LAST:event_jQuantityStateChanged

    private void jTableNoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTableNoStateChanged
    acceptNumber(jTableNo);
    }//GEN-LAST:event_jTableNoStateChanged

    private void jTableNoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableNoMouseMoved
    acceptNumber(jTableNo);
    }//GEN-LAST:event_jTableNoMouseMoved

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
    txtSearch.setText("");
    }//GEN-LAST:event_txtSearchFocusGained

    private void btnSavePrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavePrintActionPerformed
if(!tTotalAmount.getText().equals("0.00")||Integer.parseInt(jTableNo.getValue().toString())>=1){
        
   if(!checkBillId()==true){
    saveBill();
    sql="SELECT bill_content.*,bill_table.* FROM bill_content,bill_table WHERE "
        + "bill_table.bill_id='"+receiptNo.getText()+"' AND bill_content.bill_id='"+receiptNo.getText()+"'";
    printBill(sql);
    newBillId();
    showBillContent();
    jTableNo.setValue(0);
    tTotalAmount.setText("0.00");
   }else{
    JOptionPane.showMessageDialog(null,"Duplicate Record Exist!","ERROR",JOptionPane.ERROR_MESSAGE);
    newBillId();
    showBillContent();
    jTableNo.setValue(0);
    tTotalAmount.setText("0.00");
}
}else{
 JOptionPane.showMessageDialog(null,"TABLE NUMBER IS NOT SET \nOR \nEMPTY ORDER","WARNING!",JOptionPane.WARNING_MESSAGE);   
}
    }//GEN-LAST:event_btnSavePrintActionPerformed

    private void panelOrderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_panelOrderKeyPressed

    }//GEN-LAST:event_panelOrderKeyPressed

    private void jQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jQuantityKeyPressed

    }//GEN-LAST:event_jQuantityKeyPressed

    private void jMinimizeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMinimizeMouseEntered
    jMinimize.setBackground(new Color(194,48,13));
    }//GEN-LAST:event_jMinimizeMouseEntered

    private void jMinimizeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMinimizeMouseExited
    jMinimize.setBackground(new Color(221,56,17));
    }//GEN-LAST:event_jMinimizeMouseExited

    private void jCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCloseMouseEntered
    jClose.setBackground(Color.red);
    }//GEN-LAST:event_jCloseMouseEntered

    private void jCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCloseMouseExited
    jClose.setBackground(new Color(221,56,17));
    }//GEN-LAST:event_jCloseMouseExited

    private void jCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCloseMouseClicked
    if(JOptionPane.showConfirmDialog(null,"Are you sure to Exit?","CONFIRMATION",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION){
        System.exit(0);
    }
    }//GEN-LAST:event_jCloseMouseClicked

    private void jMinimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMinimizeMouseClicked
    setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jMinimizeMouseClicked

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
    jMainPanelSlider.nextPanel(5, panelHome, JPanelSlider.right); 
    }//GEN-LAST:event_btnHomeActionPerformed

    private void jCheckShowPassStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckShowPassStateChanged
    if(jCheckShowPass.isSelected()==true){
        tUserPass.setEchoChar((char) 0);
    }else{
        tUserPass.setEchoChar('\u25cf');
    }
    }//GEN-LAST:event_jCheckShowPassStateChanged

    private void tEmpIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tEmpIdFocusLost
    tEmpId.setText(toUpperCase(tEmpId.getText()));
    }//GEN-LAST:event_tEmpIdFocusLost

    private void tFullNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tFullNameFocusLost
    tFullName.setText(toUpperCase( tFullName.getText()));
    }//GEN-LAST:event_tFullNameFocusLost

    private void btnSaveUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveUserActionPerformed
    if (checkUser()==true){
        sql="select * from user_table where concat(id,employee_id,fullname,username) Like '%" + txtUserSearch.getText() + "%'";
        if(btnSaveUser.getText().equals("SAVE")){
            saveUser();
            clearUser();
            showUserTable(sql);
        }else{
            updateUser();
            clearUser();
            sql="select * from user_table where concat(id,employee_id,fullname,username) Like '%" + txtUserSearch.getText() + "%'";
            showUserTable(sql);
        }
    }
    }//GEN-LAST:event_btnSaveUserActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    choosePicture();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jUserTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jUserTableMouseClicked
    int index=jUserTable.getSelectedRow();
    sql="select * from user_table where concat(id,employee_id,fullname,username) Like '%" + txtUserSearch.getText() + "%'";
    getUser(index,sql);
    }//GEN-LAST:event_jUserTableMouseClicked

    private void btnClearUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearUserActionPerformed
    clearUser();
    }//GEN-LAST:event_btnClearUserActionPerformed

    private void jBillTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBillTableMouseClicked
    try{
    int index=jBillTable.getSelectedRow();
    getBill(index);    
    }catch(Exception e){JOptionPane.showMessageDialog(null,e);}
    }//GEN-LAST:event_jBillTableMouseClicked

    private void txtSearchBillKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchBillKeyTyped
    sql="Select * from bill_table WHERE CONCAT(bill_id,table_no,dateCreated) Like '%" + txtSearchBill.getText().trim() + "%' ORDER BY bill_id DESC";
    showBillTable(sql);
    }//GEN-LAST:event_txtSearchBillKeyTyped

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
    printFood();
    }//GEN-LAST:event_button1ActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
    printCoffee();
    }//GEN-LAST:event_button3ActionPerformed

    private void button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button5ActionPerformed
    printDessert();
    }//GEN-LAST:event_button5ActionPerformed

    private void btnPrintBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintBillActionPerformed
    try{
    //sql="Select * from bill_table WHERE concat(bill_id,table_no,totalPrice,dateCreated) Like '%" + getBillID + "%' ORDER BY bill_id DESC";
    sql="SELECT bill_content.*,bill_table.* FROM bill_content,bill_table WHERE "
        + "bill_table.bill_id Like '%" + getBillID + "%' AND bill_content.bill_id Like '%" + getBillID + "%'";
    printBill(sql);
    btnPrintBill.setEnabled(false);
    btnDeleteBill.setEnabled(false);
    }catch(Exception e){JOptionPane.showMessageDialog(null,e);}
    }//GEN-LAST:event_btnPrintBillActionPerformed

    private void btnSearchUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchUserActionPerformed
    try{sql="select * from user_table where concat(id,employee_id,fullname,username) Like '%" + txtUserSearch.getText() + "%'";
    showUserTable(sql);}catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_btnSearchUserActionPerformed

    private void txtUserSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserSearchKeyPressed
    if(evt.getKeyCode()==KeyEvent.VK_ENTER){
    try{sql="select * from user_table where concat(id,employee_id,fullname,username) Like '%" + txtUserSearch.getText() + "%'";
    showUserTable(sql);}catch(Exception e){e.printStackTrace();} 
    }
    }//GEN-LAST:event_txtUserSearchKeyPressed

    private void btnDeleteBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBillActionPerformed
    try{
    ps = con.prepareStatement("DELETE bill_content,bill_table FROM bill_content,bill_table WHERE  bill_table.bill_id=? AND bill_content.bill_id=?");
    ps.setString(1,getBillID);
    ps.setString(2,getBillID);
    ps.executeUpdate();
    JOptionPane.showMessageDialog(null,"Selected Bill Record Deleted!","DELETED!",JOptionPane.INFORMATION_MESSAGE);
    sql="Select * from bill_table WHERE CONCAT(bill_id,table_no,dateCreated) Like '%" + txtSearchBill.getText().trim() + "%' ORDER BY bill_id DESC";
    showBillTable(sql);
    }catch(HeadlessException | SQLException e){JOptionPane.showMessageDialog(null,e);}
    }//GEN-LAST:event_btnDeleteBillActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
   
    if(JOptionPane.showConfirmDialog(null,"Are you sure to Logout?","CONFIRMATION",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION){
    LoginForm loginForm =new LoginForm();
    loginForm.setVisible(true);
    this.dispose();
    }
    
    }//GEN-LAST:event_btnLogoutActionPerformed

    public static void main(String args[]) {
      
        try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Windows".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private usu.widget.Button btnAddOrder;
    private javax.swing.JButton btnBills;
    private usu.widget.ButtonGlass btnClearUser;
    private javax.swing.JButton btnCofee;
    private java.awt.Button btnDeleteBill;
    private usu.widget.ButtonGlass btnDeleteUser;
    private usu.widget.ButtonGlass btnDessertClear;
    private usu.widget.ButtonGlass btnDessertDelete;
    private usu.widget.ButtonGlass btnDessertSave;
    private usu.widget.ButtonGlass btnDrinkClear;
    private usu.widget.ButtonGlass btnDrinkDelete;
    private usu.widget.ButtonGlass btnDrinkSave;
    private javax.swing.JButton btnFoods;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnLogout;
    private usu.widget.ButtonGlass btnMealClear;
    private usu.widget.ButtonGlass btnMealDelete;
    private usu.widget.ButtonGlass btnMealSave;
    private javax.swing.JButton btnOrder;
    private javax.swing.JButton btnPastry;
    private java.awt.Button btnPrintBill;
    private usu.widget.Button btnSavePrint;
    private usu.widget.ButtonGlass btnSaveUser;
    private java.awt.Button btnSearchUser;
    private javax.swing.JButton btnUser;
    private java.awt.Button button1;
    private java.awt.Button button3;
    private java.awt.Button button5;
    private javax.swing.JComboBox<String> cmbType;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JTable jBillTable;
    private javax.swing.JPanel jBottomPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckShowPass;
    private javax.swing.JLabel jClose;
    private javax.swing.JLabel jDate;
    private javax.swing.JMenuItem jDeleteItem;
    private javax.swing.JTable jDessertTable;
    private javax.swing.JTable jDrinkTable;
    private javax.swing.JLabel jIcon;
    private javax.swing.JLabel jIcon1;
    private javax.swing.JLabel jIcon2;
    private javax.swing.JLabel jIcon3;
    private javax.swing.JLabel jIcon4;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private diu.swe.habib.JPanelSlider.JPanelSlider jMainPanelSlider;
    private javax.swing.JTable jMealTable;
    private javax.swing.JLabel jMinimize;
    private javax.swing.JTable jOrderTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel jPicture;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JTable jProductTable;
    private javax.swing.JSpinner jQuantity;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSpinner jTableNo;
    private javax.swing.JLabel jTime;
    private javax.swing.JLabel jUserPicture;
    private javax.swing.JTable jUserTable;
    private javax.swing.JLabel lblPriceTotal;
    private javax.swing.JLabel lblProdId;
    private javax.swing.JLabel lblProdName;
    private javax.swing.JLabel lblProdPrice;
    private usu.widget.Panel panel1;
    private usu.widget.Panel panel10;
    private usu.widget.Panel panel11;
    private usu.widget.Panel panel2;
    private usu.widget.Panel panel3;
    private usu.widget.Panel panel4;
    private usu.widget.Panel panel5;
    private usu.widget.Panel panel6;
    private usu.widget.Panel panel7;
    private usu.widget.Panel panel8;
    private usu.widget.Panel panel9;
    private javax.swing.JPanel panelBills;
    private javax.swing.JPanel panelCoffee;
    private javax.swing.JPanel panelFoods;
    private javax.swing.JPanel panelHome;
    private javax.swing.JPanel panelMenu;
    private javax.swing.JPanel panelOrder;
    private javax.swing.JPanel panelPastry;
    private javax.swing.JPanel panelUser;
    private javax.swing.JLabel receiptNo;
    private javax.swing.JLabel setUsername;
    private javax.swing.JLabel tCoffeeId;
    private usu.widget.TextBox tDessertName;
    private usu.widget.TextBox tDessertPrice;
    private usu.widget.TextBox tDrinkName;
    private usu.widget.TextBox tDrinkPrice;
    private usu.widget.TextBox tEmpId;
    private javax.swing.JLabel tFoodId;
    private usu.widget.TextBox tFullName;
    private usu.widget.TextBox tMealName;
    private usu.widget.TextBox tMealPrice;
    private javax.swing.JLabel tPastryId;
    private javax.swing.JLabel tTotalAmount;
    private javax.swing.JLabel tUserFullName;
    private javax.swing.JLabel tUserFullName1;
    private javax.swing.JLabel tUserId;
    private javax.swing.JPasswordField tUserPass;
    private usu.widget.TextBox tUsername;
    private usu.widget.glass.TextBoxGlass txtDessertSearch;
    private usu.widget.glass.TextBoxGlass txtDrinkSearch;
    private usu.widget.glass.TextBoxGlass txtMealSearch;
    private usu.widget.glass.TextBoxGlass txtSearch;
    private usu.widget.glass.TextBoxGlass txtSearchBill;
    private usu.widget.glass.TextBoxGlass txtUserSearch;
    // End of variables declaration//GEN-END:variables
}
